/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package serializers.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import org.apache.commons.lang.builder.HashCodeBuilder;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

public class Media implements TBase, java.io.Serializable {
private String uri;
public static final int URI = 1;
private String title;
public static final int TITLE = 2;
private int width;
public static final int WIDTH = 3;
private int height;
public static final int HEIGHT = 4;
private String format;
public static final int FORMAT = 5;
private long duration;
public static final int DURATION = 6;
private long size;
public static final int SIZE = 7;
private int bitrate;
public static final int BITRATE = 8;
private List<String> person;
public static final int PERSON = 9;
private int player;
public static final int PLAYER = 10;
private String copyright;
public static final int COPYRIGHT = 11;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean uri = false;
public boolean title = false;
public boolean width = false;
public boolean height = false;
public boolean format = false;
public boolean duration = false;
public boolean size = false;
public boolean bitrate = false;
public boolean person = false;
public boolean player = false;
public boolean copyright = false;
}

public Media() {
}

public Media(
String uri,
String title,
int width,
int height,
String format,
long duration,
long size,
int bitrate,
List<String> person,
int player,
String copyright)
{
this();
this.uri = uri;
this.__isset.uri = (uri != null);
this.title = title;
this.__isset.title = (title != null);
this.width = width;
this.__isset.width = true;
this.height = height;
this.__isset.height = true;
this.format = format;
this.__isset.format = (format != null);
this.duration = duration;
this.__isset.duration = true;
this.size = size;
this.__isset.size = true;
this.bitrate = bitrate;
this.__isset.bitrate = true;
this.person = person;
this.__isset.person = (person != null);
this.player = player;
this.__isset.player = true;
this.copyright = copyright;
this.__isset.copyright = (copyright != null);
}

public String getUri() {
return this.uri;
}

public void setUri(String uri) {
this.uri = uri;
this.__isset.uri = (uri != null);
}

public void unsetUri() {
this.__isset.uri = false;
}

public String getTitle() {
return this.title;
}

public void setTitle(String title) {
this.title = title;
this.__isset.title = (title != null);
}

public void unsetTitle() {
this.__isset.title = false;
}

public int getWidth() {
return this.width;
}

public void setWidth(int width) {
this.width = width;
this.__isset.width = true;
}

public void unsetWidth() {
this.__isset.width = false;
}

public int getHeight() {
return this.height;
}

public void setHeight(int height) {
this.height = height;
this.__isset.height = true;
}

public void unsetHeight() {
this.__isset.height = false;
}

public String getFormat() {
return this.format;
}

public void setFormat(String format) {
this.format = format;
this.__isset.format = (format != null);
}

public void unsetFormat() {
this.__isset.format = false;
}

public long getDuration() {
return this.duration;
}

public void setDuration(long duration) {
this.duration = duration;
this.__isset.duration = true;
}

public void unsetDuration() {
this.__isset.duration = false;
}

public long getSize() {
return this.size;
}

public void setSize(long size) {
this.size = size;
this.__isset.size = true;
}

public void unsetSize() {
this.__isset.size = false;
}

public int getBitrate() {
return this.bitrate;
}

public void setBitrate(int bitrate) {
this.bitrate = bitrate;
this.__isset.bitrate = true;
}

public void unsetBitrate() {
this.__isset.bitrate = false;
}

public int getPersonSize() {
return (this.person == null) ? 0 : this.person.size();
}

public java.util.Iterator<String> getPersonIterator() {
return (this.person == null) ? null : this.person.iterator();
}

public void addToPerson(String elem) {
if (this.person == null) {
this.person = new ArrayList<String>();
}
this.person.add(elem);
this.__isset.person = true;
}

public List<String> getPerson() {
return this.person;
}

public void setPerson(List<String> person) {
this.person = person;
this.__isset.person = (person != null);
}

public void unsetPerson() {
this.person = null;
this.__isset.person = false;
}

public int getPlayer() {
return this.player;
}

public void setPlayer(int player) {
this.player = player;
this.__isset.player = true;
}

public void unsetPlayer() {
this.__isset.player = false;
}

public String getCopyright() {
return this.copyright;
}

public void setCopyright(String copyright) {
this.copyright = copyright;
this.__isset.copyright = (copyright != null);
}

public void unsetCopyright() {
this.__isset.copyright = false;
}

public void setFieldValue(int fieldID, Object value) {
switch (fieldID) {
case URI:
setUri((String)value);
break;

case TITLE:
setTitle((String)value);
break;

case WIDTH:
setWidth((Integer)value);
break;

case HEIGHT:
setHeight((Integer)value);
break;

case FORMAT:
setFormat((String)value);
break;

case DURATION:
setDuration((Long)value);
break;

case SIZE:
setSize((Long)value);
break;

case BITRATE:
setBitrate((Integer)value);
break;

case PERSON:
setPerson((List<String>)value);
break;

case PLAYER:
setPlayer((Integer)value);
break;

case COPYRIGHT:
setCopyright((String)value);
break;

default:
  throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
}
}

public Object getFieldValue(int fieldID) {
switch (fieldID) {
case URI:
return getUri();

case TITLE:
return getTitle();

case WIDTH:
return new Integer(getWidth());

case HEIGHT:
return new Integer(getHeight());

case FORMAT:
return getFormat();

case DURATION:
return new Long(getDuration());

case SIZE:
return new Long(getSize());

case BITRATE:
return new Integer(getBitrate());

case PERSON:
return getPerson();

case PLAYER:
return getPlayer();

case COPYRIGHT:
return getCopyright();

default:
  throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
}
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof Media)
  return this.equals((Media)that);
return false;
}

public boolean equals(Media that) {
if (that == null)
  return false;

boolean this_present_uri = true && (this.uri != null);
boolean that_present_uri = true && (that.uri != null);
if (this_present_uri || that_present_uri) {
if (!(this_present_uri && that_present_uri))
  return false;
if (!this.uri.equals(that.uri))
  return false;
}

boolean this_present_title = true && (this.__isset.title) && (this.title != null);
boolean that_present_title = true && (that.__isset.title) && (that.title != null);
if (this_present_title || that_present_title) {
if (!(this_present_title && that_present_title))
  return false;
if (!this.title.equals(that.title))
  return false;
}

boolean this_present_width = true && (this.__isset.width);
boolean that_present_width = true && (that.__isset.width);
if (this_present_width || that_present_width) {
if (!(this_present_width && that_present_width))
  return false;
if (this.width != that.width)
  return false;
}

boolean this_present_height = true && (this.__isset.height);
boolean that_present_height = true && (that.__isset.height);
if (this_present_height || that_present_height) {
if (!(this_present_height && that_present_height))
  return false;
if (this.height != that.height)
  return false;
}

boolean this_present_format = true && (this.__isset.format) && (this.format != null);
boolean that_present_format = true && (that.__isset.format) && (that.format != null);
if (this_present_format || that_present_format) {
if (!(this_present_format && that_present_format))
  return false;
if (!this.format.equals(that.format))
  return false;
}

boolean this_present_duration = true && (this.__isset.duration);
boolean that_present_duration = true && (that.__isset.duration);
if (this_present_duration || that_present_duration) {
if (!(this_present_duration && that_present_duration))
  return false;
if (this.duration != that.duration)
  return false;
}

boolean this_present_size = true && (this.__isset.size);
boolean that_present_size = true && (that.__isset.size);
if (this_present_size || that_present_size) {
if (!(this_present_size && that_present_size))
  return false;
if (this.size != that.size)
  return false;
}

boolean this_present_bitrate = true && (this.__isset.bitrate);
boolean that_present_bitrate = true && (that.__isset.bitrate);
if (this_present_bitrate || that_present_bitrate) {
if (!(this_present_bitrate && that_present_bitrate))
  return false;
if (this.bitrate != that.bitrate)
  return false;
}

boolean this_present_person = true && (this.__isset.person) && (this.person != null);
boolean that_present_person = true && (that.__isset.person) && (that.person != null);
if (this_present_person || that_present_person) {
if (!(this_present_person && that_present_person))
  return false;
if (!this.person.equals(that.person))
  return false;
}

boolean this_present_player = true && (this.__isset.player);
boolean that_present_player = true && (that.__isset.player);
if (this_present_player || that_present_player) {
if (!(this_present_player && that_present_player))
  return false;
if (this.player != that.player)
  return false;
}

boolean this_present_copyright = true && (this.__isset.copyright) && (this.copyright != null);
boolean that_present_copyright = true && (that.__isset.copyright) && (that.copyright != null);
if (this_present_copyright || that_present_copyright) {
if (!(this_present_copyright && that_present_copyright))
  return false;
if (!this.copyright.equals(that.copyright))
  return false;
}

return true;
}

public int hashCode() {
HashCodeBuilder builder = new HashCodeBuilder();

boolean present_uri = true && (uri != null);
builder.append(present_uri);
if (present_uri)
  builder.append(uri);

boolean present_title = true && (__isset.title) && (title != null);
builder.append(present_title);
if (present_title)
  builder.append(title);

boolean present_width = true && (__isset.width);
builder.append(present_width);
if (present_width)
  builder.append(width);

boolean present_height = true && (__isset.height);
builder.append(present_height);
if (present_height)
  builder.append(height);

boolean present_format = true && (__isset.format) && (format != null);
builder.append(present_format);
if (present_format)
  builder.append(format);

boolean present_duration = true && (__isset.duration);
builder.append(present_duration);
if (present_duration)
  builder.append(duration);

boolean present_size = true && (__isset.size);
builder.append(present_size);
if (present_size)
  builder.append(size);

boolean present_bitrate = true && (__isset.bitrate);
builder.append(present_bitrate);
if (present_bitrate)
  builder.append(bitrate);

boolean present_person = true && (__isset.person) && (person != null);
builder.append(present_person);
if (present_person)
  builder.append(person);

boolean present_player = true && (__isset.player);
builder.append(present_player);
if (present_player)
  builder.append(player);

boolean present_copyright = true && (__isset.copyright) && (copyright != null);
builder.append(present_copyright);
if (present_copyright)
  builder.append(copyright);

return builder.toHashCode();
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
field = iprot.readFieldBegin();
if (field.type == TType.STOP) { 
break;
}
switch (field.id)
{
case URI:
  if (field.type == TType.STRING) {
    this.uri = iprot.readString();
    this.__isset.uri = true;
  } else { 
    TProtocolUtil.skip(iprot, field.type);
  }
  break;
case TITLE:
  if (field.type == TType.STRING) {
    this.title = iprot.readString();
    this.__isset.title = true;
  } else { 
    TProtocolUtil.skip(iprot, field.type);
  }
  break;
case WIDTH:
  if (field.type == TType.I32) {
    this.width = iprot.readI32();
    this.__isset.width = true;
  } else { 
    TProtocolUtil.skip(iprot, field.type);
  }
  break;
case HEIGHT:
  if (field.type == TType.I32) {
    this.height = iprot.readI32();
    this.__isset.height = true;
  } else { 
    TProtocolUtil.skip(iprot, field.type);
  }
  break;
case FORMAT:
  if (field.type == TType.STRING) {
    this.format = iprot.readString();
    this.__isset.format = true;
  } else { 
    TProtocolUtil.skip(iprot, field.type);
  }
  break;
case DURATION:
  if (field.type == TType.I64) {
    this.duration = iprot.readI64();
    this.__isset.duration = true;
  } else { 
    TProtocolUtil.skip(iprot, field.type);
  }
  break;
case SIZE:
  if (field.type == TType.I64) {
    this.size = iprot.readI64();
    this.__isset.size = true;
  } else { 
    TProtocolUtil.skip(iprot, field.type);
  }
  break;
case BITRATE:
  if (field.type == TType.I32) {
    this.bitrate = iprot.readI32();
    this.__isset.bitrate = true;
  } else { 
    TProtocolUtil.skip(iprot, field.type);
  }
  break;
case PERSON:
  if (field.type == TType.LIST) {
    {
      TList _list0 = iprot.readListBegin();
      this.person = new ArrayList<String>(_list0.size);
      for (int _i1 = 0; _i1 < _list0.size; ++_i1)
      {
        String _elem2 = null;
        _elem2 = iprot.readString();
        this.person.add(_elem2);
      }
      iprot.readListEnd();
    }
    this.__isset.person = true;
  } else { 
    TProtocolUtil.skip(iprot, field.type);
  }
  break;
case PLAYER:
  if (field.type == TType.I32) {
    this.player = iprot.readI32();
    this.__isset.player = true;
  } else { 
    TProtocolUtil.skip(iprot, field.type);
  }
  break;
case COPYRIGHT:
  if (field.type == TType.STRING) {
    this.copyright = iprot.readString();
    this.__isset.copyright = true;
  } else { 
    TProtocolUtil.skip(iprot, field.type);
  }
  break;
default:
  TProtocolUtil.skip(iprot, field.type);
  break;
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("Media");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.uri != null) {
field.name = "uri";
field.type = TType.STRING;
field.id = URI;
oprot.writeFieldBegin(field);
oprot.writeString(this.uri);
oprot.writeFieldEnd();
}
if (this.title != null) {
if (this.__isset.title) {
field.name = "title";
field.type = TType.STRING;
field.id = TITLE;
oprot.writeFieldBegin(field);
oprot.writeString(this.title);
oprot.writeFieldEnd();
}
}
if (this.__isset.width) {
field.name = "width";
field.type = TType.I32;
field.id = WIDTH;
oprot.writeFieldBegin(field);
oprot.writeI32(this.width);
oprot.writeFieldEnd();
}
if (this.__isset.height) {
field.name = "height";
field.type = TType.I32;
field.id = HEIGHT;
oprot.writeFieldBegin(field);
oprot.writeI32(this.height);
oprot.writeFieldEnd();
}
if (this.format != null) {
if (this.__isset.format) {
field.name = "format";
field.type = TType.STRING;
field.id = FORMAT;
oprot.writeFieldBegin(field);
oprot.writeString(this.format);
oprot.writeFieldEnd();
}
}
if (this.__isset.duration) {
field.name = "duration";
field.type = TType.I64;
field.id = DURATION;
oprot.writeFieldBegin(field);
oprot.writeI64(this.duration);
oprot.writeFieldEnd();
}
if (this.__isset.size) {
field.name = "size";
field.type = TType.I64;
field.id = SIZE;
oprot.writeFieldBegin(field);
oprot.writeI64(this.size);
oprot.writeFieldEnd();
}
if (this.__isset.bitrate) {
field.name = "bitrate";
field.type = TType.I32;
field.id = BITRATE;
oprot.writeFieldBegin(field);
oprot.writeI32(this.bitrate);
oprot.writeFieldEnd();
}
if (this.person != null) {
if (this.__isset.person) {
field.name = "person";
field.type = TType.LIST;
field.id = PERSON;
oprot.writeFieldBegin(field);
{
oprot.writeListBegin(new TList(TType.STRING, this.person.size()));
for (String _iter3 : this.person){
oprot.writeString(_iter3);
}
oprot.writeListEnd();
}
oprot.writeFieldEnd();
}
}
if (this.__isset.player) {
field.name = "player";
field.type = TType.I32;
field.id = PLAYER;
oprot.writeFieldBegin(field);
oprot.writeI32(this.player);
oprot.writeFieldEnd();
}
if (this.copyright != null) {
if (this.__isset.copyright) {
field.name = "copyright";
field.type = TType.STRING;
field.id = COPYRIGHT;
oprot.writeFieldBegin(field);
oprot.writeString(this.copyright);
oprot.writeFieldEnd();
}
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("Media(");
boolean first = true;

if (!first) sb.append(", ");
sb.append("uri:");
sb.append(this.uri);
first = false;
if (__isset.title) {
if (!first) sb.append(", ");
sb.append("title:");
sb.append(this.title);
first = false;
}
if (__isset.width) {
if (!first) sb.append(", ");
sb.append("width:");
sb.append(this.width);
first = false;
}
if (__isset.height) {
if (!first) sb.append(", ");
sb.append("height:");
sb.append(this.height);
first = false;
}
if (__isset.format) {
if (!first) sb.append(", ");
sb.append("format:");
sb.append(this.format);
first = false;
}
if (__isset.duration) {
if (!first) sb.append(", ");
sb.append("duration:");
sb.append(this.duration);
first = false;
}
if (__isset.size) {
if (!first) sb.append(", ");
sb.append("size:");
sb.append(this.size);
first = false;
}
if (__isset.bitrate) {
if (!first) sb.append(", ");
sb.append("bitrate:");
sb.append(this.bitrate);
first = false;
}
if (__isset.person) {
if (!first) sb.append(", ");
sb.append("person:");
sb.append(this.person);
first = false;
}
if (__isset.player) {
if (!first) sb.append(", ");
sb.append("player:");
sb.append(this.player);
first = false;
}
if (__isset.copyright) {
if (!first) sb.append(", ");
sb.append("copyright:");
sb.append(this.copyright);
first = false;
}
sb.append(")");
return sb.toString();
}

}

