/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package serializers.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import org.apache.commons.lang.builder.HashCodeBuilder;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

/**
 * Some comment...
 */
public class Image implements TBase, java.io.Serializable {
  private String uri;
  public static final int URI = 1;
  private String title;
  public static final int TITLE = 2;
  private int width;
  public static final int WIDTH = 3;
  private int height;
  public static final int HEIGHT = 4;
  private int size;
  public static final int SIZE = 5;

  public final Isset __isset = new Isset();
  public static final class Isset implements java.io.Serializable {
    public boolean uri = false;
    public boolean title = false;
    public boolean width = false;
    public boolean height = false;
    public boolean size = false;
  }

  public Image() {
  }

  public Image(
    String uri,
    String title,
    int width,
    int height,
    int size)
  {
    this();
    this.uri = uri;
    this.__isset.uri = (uri != null);
    this.title = title;
    this.__isset.title = (title != null);
    this.width = width;
    this.__isset.width = true;
    this.height = height;
    this.__isset.height = true;
    this.size = size;
    this.__isset.size = true;
  }

  public String getUri() {
    return this.uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
    this.__isset.uri = (uri != null);
  }

  public void unsetUri() {
    this.__isset.uri = false;
  }

  public String getTitle() {
    return this.title;
  }

  public void setTitle(String title) {
    this.title = title;
    this.__isset.title = (title != null);
  }

  public void unsetTitle() {
    this.__isset.title = false;
  }

  public int getWidth() {
    return this.width;
  }

  public void setWidth(int width) {
    this.width = width;
    this.__isset.width = true;
  }

  public void unsetWidth() {
    this.__isset.width = false;
  }

  public int getHeight() {
    return this.height;
  }

  public void setHeight(int height) {
    this.height = height;
    this.__isset.height = true;
  }

  public void unsetHeight() {
    this.__isset.height = false;
  }

  public int getSize() {
    return this.size;
  }

  public void setSize(int size) {
    this.size = size;
    this.__isset.size = true;
  }

  public void unsetSize() {
    this.__isset.size = false;
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case URI:
      setUri((String)value);
      break;

    case TITLE:
      setTitle((String)value);
      break;

    case WIDTH:
      setWidth((Integer)value);
      break;

    case HEIGHT:
      setHeight((Integer)value);
      break;

    case SIZE:
      setSize((Integer)value);
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case URI:
      return getUri();

    case TITLE:
      return getTitle();

    case WIDTH:
      return new Integer(getWidth());

    case HEIGHT:
      return new Integer(getHeight());

    case SIZE:
      return getSize();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Image)
      return this.equals((Image)that);
    return false;
  }

  public boolean equals(Image that) {
    if (that == null)
      return false;

    boolean this_present_uri = true && (this.uri != null);
    boolean that_present_uri = true && (that.uri != null);
    if (this_present_uri || that_present_uri) {
      if (!(this_present_uri && that_present_uri))
        return false;
      if (!this.uri.equals(that.uri))
        return false;
    }

    boolean this_present_title = true && (this.__isset.title) && (this.title != null);
    boolean that_present_title = true && (that.__isset.title) && (that.title != null);
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_width = true && (this.__isset.width);
    boolean that_present_width = true && (that.__isset.width);
    if (this_present_width || that_present_width) {
      if (!(this_present_width && that_present_width))
        return false;
      if (this.width != that.width)
        return false;
    }

    boolean this_present_height = true && (this.__isset.height);
    boolean that_present_height = true && (that.__isset.height);
    if (this_present_height || that_present_height) {
      if (!(this_present_height && that_present_height))
        return false;
      if (this.height != that.height)
        return false;
    }

    boolean this_present_size = true && (this.__isset.size);
    boolean that_present_size = true && (that.__isset.size);
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (this.size != that.size)
        return false;
    }

    return true;
  }

  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_uri = true && (uri != null);
    builder.append(present_uri);
    if (present_uri)
      builder.append(uri);

    boolean present_title = true && (__isset.title) && (title != null);
    builder.append(present_title);
    if (present_title)
      builder.append(title);

    boolean present_width = true && (__isset.width);
    builder.append(present_width);
    if (present_width)
      builder.append(width);

    boolean present_height = true && (__isset.height);
    builder.append(present_height);
    if (present_height)
      builder.append(height);

    boolean present_size = true && (__isset.size);
    builder.append(present_size);
    if (present_size)
      builder.append(size);

    return builder.toHashCode();
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case URI:
          if (field.type == TType.STRING) {
            this.uri = iprot.readString();
            this.__isset.uri = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TITLE:
          if (field.type == TType.STRING) {
            this.title = iprot.readString();
            this.__isset.title = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case WIDTH:
          if (field.type == TType.I32) {
            this.width = iprot.readI32();
            this.__isset.width = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case HEIGHT:
          if (field.type == TType.I32) {
            this.height = iprot.readI32();
            this.__isset.height = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SIZE:
          if (field.type == TType.I32) {
            this.size = iprot.readI32();
            this.__isset.size = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
  }

  public void write(TProtocol oprot) throws TException {
    TStruct struct = new TStruct("Image");
    oprot.writeStructBegin(struct);
    TField field = new TField();
    if (this.uri != null) {
      field.name = "uri";
      field.type = TType.STRING;
      field.id = URI;
      oprot.writeFieldBegin(field);
      oprot.writeString(this.uri);
      oprot.writeFieldEnd();
    }
    if (this.title != null) {
      if (this.__isset.title) {
      field.name = "title";
      field.type = TType.STRING;
      field.id = TITLE;
      oprot.writeFieldBegin(field);
      oprot.writeString(this.title);
      oprot.writeFieldEnd();
    }
  }
  if (this.__isset.width) {
  field.name = "width";
  field.type = TType.I32;
  field.id = WIDTH;
  oprot.writeFieldBegin(field);
  oprot.writeI32(this.width);
  oprot.writeFieldEnd();
}
if (this.__isset.height) {
field.name = "height";
field.type = TType.I32;
field.id = HEIGHT;
oprot.writeFieldBegin(field);
oprot.writeI32(this.height);
oprot.writeFieldEnd();
}
if (this.__isset.size) {
field.name = "size";
field.type = TType.I32;
field.id = SIZE;
oprot.writeFieldBegin(field);
oprot.writeI32(this.size);
oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("Image(");
boolean first = true;

if (!first) sb.append(", ");
sb.append("uri:");
sb.append(this.uri);
first = false;
if (__isset.title) {
if (!first) sb.append(", ");
sb.append("title:");
sb.append(this.title);
first = false;
}
if (__isset.width) {
if (!first) sb.append(", ");
sb.append("width:");
sb.append(this.width);
first = false;
}
if (__isset.height) {
if (!first) sb.append(", ");
sb.append("height:");
sb.append(this.height);
first = false;
}
if (__isset.size) {
if (!first) sb.append(", ");
sb.append("size:");
sb.append(this.size);
first = false;
}
sb.append(")");
return sb.toString();
}

}

