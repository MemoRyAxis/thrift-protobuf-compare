#labels Featured
*WARNING*: Benchmarks can be misleading.
 * These tests use a specific data value (DataStructuresV2).  A different data value will yield different results.
 * The tools have different sets of features (BeyondNumbers).  Some of these features make things safer or easier, but come with a performance cost.
 * Different hardware and software environments will yield different results.
 * We don't take memory usage into account.

In short, before you make a decision on which tool to use, make sure you try it out in an environment you care about.  To start, download the benchmark code and run it on _your_ hardware with data values _you_ care about.

== Setup ==

Hardware: Intel Core 2 Quad

Software: Sun JRE 1.6.0_20 (64-bit server VM), Ubuntu 9.10

JVM options: -Xmx16m -server

Data value being tested: DataStructuresV2.

Version of the benchmarking code: <a href="http://github.com/eishay/jvm-serializers/tree/43c27eda57234f8b103ef81aaba7bf88c06a4bd2/tpc">Git tree</a>

Methodology:
 * Before taking measurements, we warm things up by running the test several times.
 * For a test, measure the time taken to perform 2000 operations (serialization, deserialization, etc.).  Then divide the result by 2000.
 * Run each test 100 times and report the best result.
 * Look at the code for more details. [http://code.google.com/p/thrift-protobuf-compare/source/browse/branches/kannan/tpc/src/serializers/BenchmarkRunner.java?r=206 BenchmarkRunner.java]

Tool Versions ([http://code.google.com/p/thrift-protobuf-compare/source/browse/?r=187#svn/branches/kannan/tpc/lib lib/]):
 * [http://code.google.com/p/protobuf/ protobuf] 2.3.0
 * [http://incubator.apache.org/thrift/ thrift] 0.2.0
 * [http://hadoop.apache.org/avro/ avro] 1.3.2
 * [http://code.google.com/p/kryo/ kryo] 1.0
 * [http://hessian.caucho.com/ hessian] 4.0.3
 * [http://activemq.apache.org/ activemq-protobuf] 1.1-SNAPSHOT
 * [http://scala-lang.org/ scala] 2.8.0-rc1
 * [http://github.com/harrah/sbinary sbinary] 0.3.1-SNAPSHOT
 * [http://code.google.com/p/google-gson/ google-gson] 1.4
 * [http://jackson.codehaus.org/ jackson] 1.5.1
 * [http://javolution.org/ javolution] 5.2.6
 * [http://code.google.com/p/protostuff/ protostuff] 1.0.0.M1
 * [http://woodstox.codehaus.org/ woodstox] 4.0.7
 * [http://www.cowtowncoder.com/hatchery/aalto/index.html aalto] 0.9.5
 * [http://fi.dev.java.net/ fast-infoset] 1.2.6
 * [http://xstream.codehaus.org/ xstream] 1.3.1

= Charts =

== Total Time ("total") ==

Create an object, serialize it to a byte array, then deserialize it back to an object.

<img src='http://chart.apis.google.com/chart?chtt=total&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x426&chd=t:3234,4375,4583,5094,5712,6949,7199,7817,9228,9532,11160,11265,12575,12698,13233,14117,14950,16244,17187,23282,28258,31018,37012,43989,61663,74099,113707,141689,218143,225905,227399,227943,228237&chds=0,251061.7483&chxt=y&chxl=0:|woodstox-xstream|fastinfo-xstream|xml%2Fxstream|aalto-xstream|json%2Fgoogle-gson|json%2Fprotobuf|scala%2Fjava-built-in|java-built-in|xml%2Fxstream%2Bc|fastinfo-xstream%2Bc|woodstox-xstream%2Bc|xml%2Fmanual-fastinfo|aalto-xstream%2Bc|hessian|json%2Fjackson-databind|xml%2Fmanual-woodstox|xml%2Fjavolution|json%2Fprotostuff-runtime|avro-generic|json%2Fprotostuff-core|avro|json%2Fjackson-manual|xml%2Fmanual-aalto|thrift-compact|thrift|scala%2Fsbinary|protobuf%2Factivemq%2Balt|protobuf|protobuf%2Fprotostuff-runtime|protobuf%2Fprotostuff-core|kryo|kryo-opt|java-manual&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=6,0,6&nonsense=aaa.png'/>

== Serialization Time ("ser") ==

Create an object, serialize it to a byte array.
 * Java's built-in serializer faithfully represents arbitrary object graphs, which hurts performance.  All the other serializers flatten the structure out to a tree.

<img src='http://chart.apis.google.com/chart?chtt=ser&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x426&chd=t:1761,2021,2138,2637,2963,4249,4312,4327,4345,4377,4553,4662,5145,5575,6622,6804,7882,8553,10402,10898,11198,12916,13204,14205,15707,19990,20830,22375,83338,86101,88783,89309,105667&chds=0,116234.20325000002&chxt=y&chxl=0:|fastinfo-xstream|aalto-xstream|woodstox-xstream|xml%2Fxstream|json%2Fgoogle-gson|json%2Fprotobuf|scala%2Fjava-built-in|fastinfo-xstream%2Bc|xml%2Fxstream%2Bc|xml%2Fmanual-fastinfo|java-built-in|woodstox-xstream%2Bc|hessian|aalto-xstream%2Bc|json%2Fjackson-databind|json%2Fprotostuff-runtime|json%2Fprotostuff-core|xml%2Fmanual-woodstox|json%2Fjackson-manual|xml%2Fjavolution|avro-generic|avro|xml%2Fmanual-aalto|scala%2Fsbinary|thrift-compact|thrift|protobuf%2Factivemq%2Balt|protobuf|protobuf%2Fprotostuff-runtime|protobuf%2Fprotostuff-core|kryo|kryo-opt|java-manual&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=6,0,6&nonsense=aaa.png'/>

== Deserialization Time ("deser+deep") ==

Often the most expensive operation.  To make a fair comparison, all fields of the deserialized instances are accessed - this forces lazy deserializers to really do their work. The raw data below shows additional measurements for deserialization.

<img src='http://chart.apis.google.com/chart?chtt=deser%2Bdeep&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x426&chd=t:1472,2354,2444,2457,2700,2749,2886,3439,4642,4816,4900,5187,5563,6607,6785,7912,8088,9374,9440,12083,16813,17359,23999,24095,45956,60895,92876,119313,122276,134804,136596,139454,141297&chds=0,155427.12900000002&chxt=y&chxl=0:|xml%2Fxstream|woodstox-xstream|aalto-xstream|json%2Fgoogle-gson|fastinfo-xstream|json%2Fprotobuf|scala%2Fjava-built-in|java-built-in|xml%2Fxstream%2Bc|woodstox-xstream%2Bc|fastinfo-xstream%2Bc|aalto-xstream%2Bc|xml%2Fmanual-fastinfo|hessian|xml%2Fmanual-woodstox|xml%2Fjavolution|avro-generic|avro|json%2Fjackson-databind|xml%2Fmanual-aalto|json%2Fprotostuff-runtime|thrift-compact|thrift|json%2Fprotostuff-core|json%2Fjackson-manual|scala%2Fsbinary|protobuf%2Factivemq%2Balt|protobuf%2Fprotostuff-runtime|protobuf|protobuf%2Fprotostuff-core|kryo|kryo-opt|java-manual&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=6,0,6&nonsense=aaa.png'/>

== Serialized Size ("size") ==

The size of the serialized data.  These numbers may vary depending on the exact data value being used.
 * Java's built-in serializer stores the full class name in serialized form.  So you don't need to know ahead of time what kind of object you're reading in.
 * The 'scala' test, which uses Java's built-in serialization, yields a larger serialized representation because it usually creates more Java classes under the hood.

<img src='http://chart.apis.google.com/chart?chtt=size&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x426&chd=t:219,221,221,233,239,239,239,240,241,255,255,293,333,349,360,370,381,398,419,419,432,444,486,488,495,495,501,503,758,796,796,889,1312&chds=0,1443.2&chxt=y&chxl=0:|scala%2Fjava-built-in|java-built-in|woodstox-xstream|aalto-xstream|xml%2Fxstream|json%2Fjackson-databind|hessian|xml%2Fmanual-woodstox|xml%2Fmanual-aalto|json%2Fprotobuf|json%2Fgoogle-gson|fastinfo-xstream|xml%2Fjavolution|woodstox-xstream%2Bc|aalto-xstream%2Bc|json%2Fjackson-manual|xml%2Fxstream%2Bc|json%2Fprotostuff-runtime|json%2Fprotostuff-core|thrift|xml%2Fmanual-fastinfo|fastinfo-xstream%2Bc|java-manual|scala%2Fsbinary|protobuf%2Fprotostuff-runtime|thrift-compact|protobuf%2Factivemq%2Balt|protobuf|protobuf%2Fprotostuff-core|kryo|avro-generic|avro|kryo-opt&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=6,0,6&nonsense=aaa.png'/>

== Serialization Compressed Size ("size+dfl") ==

The size of the serialized data compressed with Java's built-in implementation of DEFLATE (zlib).

<img src='http://chart.apis.google.com/chart?chtt=size%2Bdfl&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x426&chd=t:133,133,135,147,147,147,149,149,149,149,150,191,195,202,205,220,227,236,236,239,250,253,259,267,267,270,313,313,323,344,344,517,700&chds=0,770.0000000000001&chxt=y&chxl=0:|scala%2Fjava-built-in|java-built-in|woodstox-xstream|aalto-xstream|fastinfo-xstream|hessian|xml%2Fxstream|json%2Fjackson-databind|xml%2Fmanual-woodstox|xml%2Fmanual-aalto|json%2Fgoogle-gson|json%2Fprotobuf|xml%2Fmanual-fastinfo|xml%2Fjavolution|woodstox-xstream%2Bc|aalto-xstream%2Bc|fastinfo-xstream%2Bc|json%2Fjackson-manual|xml%2Fxstream%2Bc|json%2Fprotostuff-runtime|thrift|json%2Fprotostuff-core|protobuf%2Fprotostuff-runtime|protobuf%2Factivemq%2Balt|protobuf|protobuf%2Fprotostuff-core|thrift-compact|kryo|java-manual|scala%2Fsbinary|kryo-opt|avro-generic|avro&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=6,0,6&nonsense=aaa.png'/>

== Object Creation Time ("create") ==

Object creation is not so meaningful since it takes in average 100 nano to create an object.  However, the different tools vary in how "fancy" their objects are.  Some just create a plain Java class and let you access fields directly, while others have set/get methods, while others use the "builder" pattern.
 * Protobuf and Thrift use the "builder" pattern to create objects, which makes the operation more expensive.
 * Avro stores Strings in UTF8 form.  The time taken to convert from Java "String" values to UTF-8 is included under "create", "ser", "deser+shal", and "deser+deep", which isn't quite representative of real-world usage.  Real code that uses Avro might be able to keep strings in UTF-8 form, thus avoiding the need to convert back and forth (in which case the "ser+same" and "deser" results might be more accurate reflections of Avro's performance).

<img src='http://chart.apis.google.com/chart?chtt=create&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x426&chd=t:223,224,224,224,224,224,225,225,225,225,226,227,227,227,228,228,228,229,229,231,232,238,361,363,374,422,422,484,498,744,760,1923,2391&chds=0,2630.206821&chxt=y&chxl=0:|avro-generic|avro|scala%2Fjava-built-in|scala%2Fsbinary|json%2Fprotobuf|protobuf|thrift|thrift-compact|protobuf%2Factivemq%2Balt|protobuf%2Fprotostuff-core|json%2Fprotostuff-core|xml%2Fjavolution|fastinfo-xstream%2Bc|json%2Fjackson-manual|kryo-opt|aalto-xstream%2Bc|json%2Fgoogle-gson|hessian|fastinfo-xstream|woodstox-xstream|protobuf%2Fprotostuff-runtime|java-built-in|json%2Fprotostuff-runtime|xml%2Fxstream|json%2Fjackson-databind|aalto-xstream|xml%2Fxstream%2Bc|xml%2Fmanual-woodstox|kryo|woodstox-xstream%2Bc|xml%2Fmanual-aalto|java-manual|xml%2Fmanual-fastinfo&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=6,0,6&nonsense=aaa.png'/>

= Numbers =

Times are in nanoseconds, sizes are in bytes.
{{{
                             create     ser   +same   deser   +shal   +deep   total   size  +dfl
protobuf                        484    4250    2109    2446    2540    2700    6950    239   149
thrift                          423    4327    4005    4554    4688    4901    9228    349   195
thrift-compact                  423    4345    3909    5008    5090    5187    9532    240   149
protobuf/activemq+alt           374    4313       9      22    1474    2887    7200    239   149
protobuf/protostuff-core        363    2637    2329    2244    2368    2457    5095    239   149
protobuf/protostuff-runtime     228    2963    2794    2336    2622    2749    5713    241   150
kryo                            225    2139    1984    2302    2395    2445    4584    233   147
kryo-opt                        230    2022    1895    2181    2266    2354    4376    219   135
avro                           1923    4662    2738    5919    7128    7913   12575    221   133
avro-generic                   2391    5145    2458    5549    7158    8088   13233    221   133
hessian                         228   11199   10274   12054   12171   12084   23283    501   313
java-built-in                   227   13204   11621   60011   60333   60895   74100    889   517
java-manual                     224    1762    1605    1297    1379    1473    3235    255   147
scala/java-built-in             760   20830   17924   89780   92206   92877  113707   1312   700
scala/sbinary                   745    4378    3285    3019    3166    3440    7818    255   147
json/jackson-manual             232    6622    6447    4412    4494    4643   11265    398   220
json/jackson-databind           226   10402   10070    6394    6637    6786   17188    503   270
json/protostuff-core            362    7883    7429    4516    4628    4816   12699    360   191
json/protostuff-runtime         227    8554    8145    5281    5431    5563   14117    370   202
json/protobuf                   498   22376   21635  121247  118415  119314  141689    488   253
json/google-gson                228   83339   82820  135358  134710  134805  218143    486   259
xml/manual-woodstox             225    6804    6603    8988    9212    9441   16245    495   267
xml/manual-aalto                224    4554    4170    6203    6336    6607   11161    495   267
xml/manual-fastinfo             223   14206   13939   16342   16591   16813   31019    333   250
xml/xstream                     226   86102   83869  144382  143239  141297  227399    758   313
xml/xstream+c                   225   15707   14192   45473   47699   45956   61663    381   205
woodstox-xstream                228   88784   86762  140295  139975  139454  228238    796   344
woodstox-xstream+c              225   12916   11720   23559   23818   24096   37012    419   236
aalto-xstream                   226   89309   84790  137973  132225  136597  225906    796   344
aalto-xstream+c                 230   10899    9350   16736   16814   17360   28259    419   236
fastinfo-xstream                228  105667  102379  122782  125822  122276  227944    444   323
fastinfo-xstream+c              232   19990   18306   23616   23900   24000   43990    293   227
xml/javolution                  239    5575    5423    8823    9100    9375   14950    432   239
}}}

Columns:
 * create: create an object (using the classes specified by the serialization tool)
 * ser: create an object and serialize it
 * +same: serialize the same object (i.e. doesn't include creation time)
 * deser: deserialize an object
 * +shal: deserialize an object and access the top-level fields
 * +deep: deserialize an object and access all the fields
 * total: create + serialize + deserialize and access all fields
 * size: the size of the serialized data
 * +dfl: the size of the serialized data compressed with Java's built-in implementation of DEFLATE (zlib)