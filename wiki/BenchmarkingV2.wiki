#labels Featured
*WARNING*: Benchmarks can be misleading.
 * These tests use a specific data value (DataStructuresV2).  A different data value will yield different results.
 * The tools have different sets of features (BeyondNumbers).  Some of these features make things safer or easier, but come with a performance cost.
 * Different hardware and software environments will yield different results.
 * We don't take memory usage into account.

In short, before you make a decision on which tool to use, make sure you try it out in an environment you care about.  To start, download the benchmark code and run it on _your_ hardware with data values _you_ care about.

== Setup ==

Hardware: Intel Core 2 Quad 2.66ghz

Software: Sun JRE 1.6.0_21 (64-bit server VM), Ubuntu 10.04

JVM options: -Xmx16m -server

Data value being tested: DataStructuresV2.

Version of the benchmarking code: <a href="http://github.com/eishay/jvm-serializers/tree/1f16663c3acafd998f59b4c9e39020be1878bd60/tpc">Git tree</a>

Methodology:
 * Before taking measurements, we warm things up by running the test several times.
 * For a test, measure the time taken to perform 2000 operations (serialization, deserialization, etc.).  Then divide the result by 2000.
 * Run each test 100 times and report the best result.
 * Look at the code for more details. [http://github.com/eishay/jvm-serializers/tree/1f16663c3acafd998f59b4c9e39020be1878bd60/tpc/src/serializers/BenchmarkRunner.java BenchmarkRunner.java]

Tool Versions ([http://github.com/eishay/jvm-serializers/tree/1f16663c3acafd998f59b4c9e39020be1878bd60/tpc/lib lib/]):
 * [http://code.google.com/p/protobuf/ protobuf] 2.3.0
 * [http://incubator.apache.org/thrift/ thrift] 0.4.0
 * [http://hadoop.apache.org/avro/ avro] 1.3.2
 * [http://code.google.com/p/kryo/ kryo] 1.03
 * [http://hessian.caucho.com/ hessian] 4.0.3
 * [http://activemq.apache.org/ activemq-protobuf] 1.1-SNAPSHOT
 * [http://scala-lang.org/ scala] 2.8.0-rc1
 * [http://github.com/harrah/sbinary sbinary] 0.3.1-SNAPSHOT
 * [http://code.google.com/p/google-gson/ google-gson] 1.5
 * [http://jackson.codehaus.org/ jackson] 1.6.1
 * [http://javolution.org/ javolution] 5.2.6
 * [http://code.google.com/p/protostuff/ protostuff] 1.0.0.M5
 * [http://woodstox.codehaus.org/ woodstox] 4.0.7
 * [http://www.cowtowncoder.com/hatchery/aalto/index.html aalto] 0.9.5
 * [http://fi.dev.java.net/ fast-infoset] 1.2.6
 * [http://xstream.codehaus.org/ xstream] 1.3.1

= Charts =

== Total Time ("total") ==

Create an object, serialize it to a byte array, then deserialize it back to an object.

<img src='http://chart.apis.google.com/chart?chtt=total&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x402&chd=t:3293,3646,3747,4336,4360,4474,5234,6637,6810,6954,6974,7476,7642,8258,8605,11371,12043,12343,12965,18532,23443,29861,31402,31683,40190,41657,62879,73327,112222,136954,208210&chds=0,229031.32780000003&chxt=y&chxl=0:|json%2Fgoogle-gson|json%2Fprotobuf|scala%2Fjava-built-in|java-built-in|xml%2Fxstream%2Bc|xml%2Fxstream%2Bc-fastinfo|xml%2Fxstream%2Bc-woodstox|xml%2Fxstream%2Bc-aalto|xml%2Fmanual-fastinfo|xml%2Fjavolution|hessian|xml%2Fmanual-woodstox|avro-generic|avro|xml%2Fmanual-aalto|json%2Fjackson-databind|json%2Fprotostuff|json%2Fprotostuff%2Bnumeric|json%2Fjackson-manual|scala%2Fsbinary|thrift-compact|thrift|protobuf%2Factivemq%2Balt|protobuf|kryo|protostuff-runtime|protobuf%2Fprotostuff-runtime|kryo-opt|protobuf%2Fprotostuff|protostuff|java-manual&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=6,0,6&nonsense=aaa.png'/>

== Serialization Time ("ser") ==

Create an object, serialize it to a byte array.
 * Java's built-in serializer faithfully represents arbitrary object graphs, which hurts performance.  All the other serializers flatten the structure out to a tree.

<img src='http://chart.apis.google.com/chart?chtt=ser&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x402&chd=t:1306,1417,1805,1867,1995,2015,2600,2942,3399,3476,4051,4116,4164,4194,4266,4604,4856,4943,5141,7739,10997,11120,12997,13206,13415,14662,14853,19201,21543,22622,79781&chds=0,87759.29250000001&chxt=y&chxl=0:|json%2Fgoogle-gson|json%2Fprotobuf|scala%2Fjava-built-in|xml%2Fxstream%2Bc-fastinfo|xml%2Fxstream%2Bc|xml%2Fmanual-fastinfo|xml%2Fxstream%2Bc-woodstox|java-built-in|xml%2Fjavolution|hessian|xml%2Fxstream%2Bc-aalto|xml%2Fmanual-woodstox|avro-generic|xml%2Fmanual-aalto|json%2Fjackson-databind|avro|thrift|protobuf|thrift-compact|scala%2Fsbinary|protobuf%2Factivemq%2Balt|json%2Fprotostuff%2Bnumeric|json%2Fprotostuff|json%2Fjackson-manual|kryo|kryo-opt|protostuff-runtime|protobuf%2Fprotostuff-runtime|java-manual|protobuf%2Fprotostuff|protostuff&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=6,0,6&nonsense=aaa.png'/>

== Deserialization Time ("deser+deep") ==

Often the most expensive operation.  To make a fair comparison, all fields of the deserialized instances are accessed - this forces lazy deserializers to really do their work. The raw data below shows additional measurements for deserialization.

<img src='http://chart.apis.google.com/chart?chtt=deser%2Bdeep&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x402&chd=t:1488,2321,2329,2340,2443,2479,2492,2633,2687,2758,2809,3360,4700,4781,5206,6514,7100,7739,7823,10792,12322,16740,16864,20686,22456,26775,48026,60121,90679,114332,128429&chds=0,141272.03530000002&chxt=y&chxl=0:|json%2Fgoogle-gson|json%2Fprotobuf|scala%2Fjava-built-in|java-built-in|xml%2Fxstream%2Bc|xml%2Fxstream%2Bc-woodstox|xml%2Fxstream%2Bc-fastinfo|xml%2Fxstream%2Bc-aalto|xml%2Fjavolution|xml%2Fmanual-fastinfo|hessian|xml%2Fmanual-woodstox|avro-generic|avro|xml%2Fmanual-aalto|json%2Fjackson-databind|json%2Fprotostuff|json%2Fprotostuff%2Bnumeric|json%2Fjackson-manual|scala%2Fsbinary|thrift-compact|protobuf%2Factivemq%2Balt|thrift|kryo|protobuf%2Fprotostuff-runtime|protostuff-runtime|protobuf|protostuff|protobuf%2Fprotostuff|kryo-opt|java-manual&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=6,0,6&nonsense=aaa.png'/>

== Serialized Size ("size") ==

The size of the serialized data.  These numbers may vary depending on the exact data value being used.
 * Java's built-in serializer stores the full class name in serialized form.  So you don't need to know ahead of time what kind of object you're reading in.
 * The 'scala' test, which uses Java's built-in serialization, yields a larger serialized representation because it usually creates more Java classes under the hood.

<img src='http://chart.apis.google.com/chart?chtt=size&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x402&chd=t:219,221,221,233,239,239,239,239,240,241,241,255,255,345,349,360,377,449,468,486,487,488,501,503,504,525,525,653,653,889,1312&chds=0,1443.2&chxt=y&chxl=0:|scala%2Fjava-built-in|java-built-in|xml%2Fmanual-woodstox|xml%2Fmanual-aalto|xml%2Fxstream%2Bc-woodstox|xml%2Fxstream%2Bc-aalto|xml%2Fjavolution|json%2Fjackson-databind|hessian|json%2Fprotobuf|xml%2Fxstream%2Bc|json%2Fgoogle-gson|json%2Fjackson-manual|json%2Fprotostuff|xml%2Fmanual-fastinfo|json%2Fprotostuff%2Bnumeric|thrift|xml%2Fxstream%2Bc-fastinfo|java-manual|scala%2Fsbinary|protostuff-runtime|protobuf%2Fprotostuff-runtime|thrift-compact|protobuf%2Factivemq%2Balt|protostuff|protobuf|protobuf%2Fprotostuff|kryo|avro-generic|avro|kryo-opt&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=6,0,6&nonsense=aaa.png'/>

== Serialization Compressed Size ("size+dfl") ==

The size of the serialized data compressed with Java's built-in implementation of DEFLATE (zlib).

<img src='http://chart.apis.google.com/chart?chtt=size%2Bdfl&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x402&chd=t:133,133,135,147,147,147,148,149,149,149,150,150,151,191,197,233,244,253,253,259,263,264,270,273,273,284,304,304,313,517,700&chds=0,770.0000000000001&chxt=y&chxl=0:|scala%2Fjava-built-in|java-built-in|hessian|xml%2Fmanual-woodstox|xml%2Fmanual-aalto|xml%2Fmanual-fastinfo|xml%2Fxstream%2Bc-woodstox|xml%2Fxstream%2Bc-aalto|json%2Fjackson-databind|xml%2Fxstream%2Bc-fastinfo|xml%2Fjavolution|json%2Fgoogle-gson|json%2Fjackson-manual|json%2Fprotobuf|xml%2Fxstream%2Bc|json%2Fprotostuff|thrift|json%2Fprotostuff%2Bnumeric|protostuff-runtime|protostuff|protobuf%2Fprotostuff-runtime|protobuf%2Factivemq%2Balt|protobuf|protobuf%2Fprotostuff|thrift-compact|kryo|java-manual|scala%2Fsbinary|kryo-opt|avro-generic|avro&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=6,0,6&nonsense=aaa.png'/>

== Object Creation Time ("create") ==

Object creation is not so meaningful since it takes in average 100 nano to create an object.  However, the different tools vary in how "fancy" their objects are.  Some just create a plain Java class and let you access fields directly, while others have set/get methods, while others use the "builder" pattern.
 * Protobuf and Thrift use the "builder" pattern to create objects, which makes the operation more expensive.
 * Avro stores Strings in UTF8 form.  The time taken to convert from Java "String" values to UTF-8 is included under "create", "ser", "deser+shal", and "deser+deep", which isn't quite representative of real-world usage.  Real code that uses Avro might be able to keep strings in UTF-8 form, thus avoiding the need to convert back and forth (in which case the "ser+same" and "deser" results might be more accurate reflections of Avro's performance).

<img src='http://chart.apis.google.com/chart?chtt=create&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x402&chd=t:212,212,212,212,212,212,212,212,212,212,213,213,213,214,214,215,219,219,336,338,339,339,354,402,402,466,467,713,715,1778,2366&chds=0,2602.9895815000004&chxt=y&chxl=0:|avro-generic|avro|scala%2Fsbinary|scala%2Fjava-built-in|protobuf|json%2Fprotobuf|thrift|thrift-compact|protobuf%2Factivemq%2Balt|json%2Fprotostuff|json%2Fprotostuff%2Bnumeric|protobuf%2Fprotostuff|protostuff|xml%2Fxstream%2Bc-woodstox|xml%2Fmanual-woodstox|json%2Fgoogle-gson|json%2Fjackson-databind|json%2Fjackson-manual|java-built-in|protobuf%2Fprotostuff-runtime|protostuff-runtime|hessian|kryo|xml%2Fmanual-aalto|xml%2Fxstream%2Bc-aalto|xml%2Fmanual-fastinfo|kryo-opt|xml%2Fxstream%2Bc-fastinfo|xml%2Fjavolution|xml%2Fxstream%2Bc|java-manual&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=6,0,6&nonsense=aaa.png'/>

= Numbers =

Times are in nanoseconds, sizes are in bytes.
{{{
                                 create     ser   +same   deser   +shal   +deep   total   size  +dfl
java-built-in                       214   13207   11961   59717   60051   60121   73328    889   517
java-manual                         212    1805    1614    1305    1369    1489    3294    255   147
protobuf                            467    4194    2080    2221    2252    2444    6638    239   149
thrift                              403    4267    3949    2357    2485    2687    6954    349   197
thrift-compact                      402    4165    3638    2509    2584    2810    6975    240   148
protobuf/activemq+alt               355    4052      10      23    1385    2758    6810    239   149
protostuff                          337    1306    1086    2106    2230    2340    3646    239   150
protostuff-runtime                  213    1995    1650    2190    2409    2479    4475    241   151
protobuf/protostuff                 339    1417    1203    2154    2195    2330    3747    239   149
protobuf/protostuff-runtime         213    1868    1677    2191    2412    2493    4361    241   150
kryo                                213    2601    2510    2479    2565    2634    5234    233   147
kryo-opt                            212    2016    1862    2172    2247    2321    4337    219   135
avro                               1778    4604    2862    5966    7005    7740   12344    221   133
avro-generic                       2366    5141    2565    5456    6914    7824   12965    221   133
hessian                             213   11121   10080   12025   12163   12323   23443    501   313
scala/java-built-in                 714   21544   18527   89386   90139   90679  112223   1312   700
scala/sbinary                       716    4116    3198    2804    3017    3360    7477    255   147
json/jackson-manual                 215    2942    2816    4352    4694    4700    7642    468   253
json/jackson-databind               215    4856    4558    6231    6397    6515   11371    503   270
json/protostuff                     340    3400    3098    4881    4978    5206    8606    449   233
json/protostuff+numeric             339    3476    3232    4492    4591    4782    8258    360   191
json/protobuf                       466   22622   21521  112881  113605  114333  136955    488   253
json/google-gson                    215   79781   79174  128278  128199  128429  208210    486   259
xml/manual-woodstox                 219    7740    7381   10472   10706   10793   18533    653   304
xml/manual-aalto                    213    4943    4780    6762    6969    7100   12043    653   304
xml/manual-fastinfo                 212   14663   14254   16477   16537   16740   31403    377   284
xml/xstream+c                       212   14853   13812   47704   47759   48026   62879    487   244
xml/xstream+c-woodstox              220   13415   11914   26269   26491   26775   40191    525   273
xml/xstream+c-aalto                 213   10998    9812   20091   20330   20686   31684    525   273
xml/xstream+c-fastinfo              212   19201   17619   22196   22494   22456   41658    345   264
xml/javolution                      212   12997   12504   16413   16646   16864   29861    504   263
}}}

Columns:
 * create: create an object (using the classes specified by the serialization tool)
 * ser: create an object and serialize it
 * +same: serialize the same object (i.e. doesn't include creation time)
 * deser: deserialize an object
 * +shal: deserialize an object and access the top-level fields
 * +deep: deserialize an object and access all the fields
 * total: create + serialize + deserialize and access all fields
 * size: the size of the serialized data
 * +dfl: the size of the serialized data compressed with Java's built-in implementation of DEFLATE (zlib)