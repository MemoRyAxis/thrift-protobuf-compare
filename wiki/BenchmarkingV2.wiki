#labels Featured
*WARNING*: Benchmarks can be misleading.
 * These tests use a specific data value (DataStructuresV2).  A different data value will yield different results.
 * The tools have different sets of features (BeyondNumbers).  Some of these features make things safer or easier, but come with a performance cost.
 * Different hardware and software environments will yield different results.
 * We don't take memory usage into account.

In short, before you make a decision on which tool to use, make sure you try it out in an environment you care about.  To start, download the benchmark code and run it on _your_ hardware with data values _you_ care about.

== Setup ==

Hardware: Intel Core 2 Quad

Software: Sun JRE 1.6.0_20 (64-bit server VM), Ubuntu 9.10

JVM options: -Xmx16m -server

Data value being tested: DataStructuresV2.

Version of the benchmarking code: <a href="http://github.com/eishay/jvm-serializers/tree/0663387aea7cdcc5893c39e5c9c35f13e0a1ba22/tpc">Git tree</a>

Methodology:
 * Before taking measurements, we warm things up by running the test several times.
 * For a test, measure the time taken to perform 2000 operations (serialization, deserialization, etc.).  Then divide the result by 2000.
 * Run each test 100 times and report the best result.
 * Look at the code for more details. [http://code.google.com/p/thrift-protobuf-compare/source/browse/branches/kannan/tpc/src/serializers/BenchmarkRunner.java?r=206 BenchmarkRunner.java]

Tool Versions ([http://code.google.com/p/thrift-protobuf-compare/source/browse/?r=187#svn/branches/kannan/tpc/lib lib/]):
 * [http://code.google.com/p/protobuf/ protobuf] 2.3.0
 * [http://incubator.apache.org/thrift/ thrift] 0.2.0
 * [http://hadoop.apache.org/avro/ avro] 1.3.2
 * [http://code.google.com/p/kryo/ kryo] 1.0
 * [http://hessian.caucho.com/ hessian] 4.0.3
 * [http://activemq.apache.org/ activemq-protobuf] 1.1-SNAPSHOT
 * [http://scala-lang.org/ scala] 2.8.0-rc1
 * [http://github.com/harrah/sbinary sbinary] 0.3.1-SNAPSHOT
 * [http://code.google.com/p/google-gson/ google-gson] 1.4
 * [http://jackson.codehaus.org/ jackson] 1.5.1
 * [http://javolution.org/ javolution] 5.2.6
 * [http://code.google.com/p/protostuff/ protostuff] 1.0.0.M2
 * [http://woodstox.codehaus.org/ woodstox] 4.0.7
 * [http://www.cowtowncoder.com/hatchery/aalto/index.html aalto] 0.9.5
 * [http://fi.dev.java.net/ fast-infoset] 1.2.6
 * [http://xstream.codehaus.org/ xstream] 1.3.1

= Charts =

== Total Time ("total") ==

Create an object, serialize it to a byte array, then deserialize it back to an object.

<img src='http://chart.apis.google.com/chart?chtt=total&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x426&chd=t:3254,4298,4652,4856,4972,5655,6912,7079,7658,9116,9193,10788,11438,12413,12524,13289,14696,16424,16956,23464,28122,31673,36970,43303,64798,73470,110697,138505,219332,222190,224909,228205,231607&chds=0,254768.16695000004&chxt=y&chxl=0:|xml%2Fxstream|woodstox-xstream|fastinfo-xstream|aalto-xstream|json%2Fgoogle-gson|json%2Fprotobuf|scala%2Fjava-built-in|java-built-in|xml%2Fxstream%2Bc|fastinfo-xstream%2Bc|woodstox-xstream%2Bc|xml%2Fmanual-fastinfo|aalto-xstream%2Bc|hessian|json%2Fjackson-databind|xml%2Fmanual-woodstox|xml%2Fjavolution|avro-generic|avro|json%2Fprotostuff|json%2Fjackson-manual|xml%2Fmanual-aalto|thrift-compact|thrift|scala%2Fsbinary|protobuf%2Factivemq%2Balt|protobuf|protobuf%2Fprotostuff-runtime|protobuf%2Fprotostuff|protostuff-core-ge|kryo|kryo-opt|java-manual&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=6,0,6&nonsense=aaa.png'/>

== Serialization Time ("ser") ==

Create an object, serialize it to a byte array.
 * Java's built-in serializer faithfully represents arbitrary object graphs, which hurts performance.  All the other serializers flatten the structure out to a tree.

<img src='http://chart.apis.google.com/chart?chtt=ser&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x426&chd=t:1784,2008,2194,2394,2542,2970,4008,4178,4228,4264,4320,4590,4614,5139,5342,6723,6750,7803,10243,10630,11342,12814,13299,14572,15167,19542,20712,21573,85376,85533,86232,87227,104650&chds=0,115115.03685000002&chxt=y&chxl=0:|fastinfo-xstream|woodstox-xstream|xml%2Fxstream|aalto-xstream|json%2Fgoogle-gson|json%2Fprotobuf|scala%2Fjava-built-in|fastinfo-xstream%2Bc|xml%2Fxstream%2Bc|xml%2Fmanual-fastinfo|java-built-in|woodstox-xstream%2Bc|hessian|aalto-xstream%2Bc|json%2Fjackson-databind|json%2Fprotostuff|xml%2Fmanual-woodstox|json%2Fjackson-manual|xml%2Fjavolution|avro-generic|avro|xml%2Fmanual-aalto|protobuf|thrift|protobuf%2Factivemq%2Balt|scala%2Fsbinary|thrift-compact|protobuf%2Fprotostuff-runtime|protobuf%2Fprotostuff|protostuff-core-ge|kryo|kryo-opt|java-manual&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=6,0,6&nonsense=aaa.png'/>

== Deserialization Time ("deser+deep") ==

Often the most expensive operation.  To make a fair comparison, all fields of the deserialized instances are accessed - this forces lazy deserializers to really do their work. The raw data below shows additional measurements for deserialization.

<img src='http://chart.apis.google.com/chart?chtt=deser%2Bdeep&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x426&chd=t:1469,2290,2429,2458,2462,2591,2684,2850,3479,4610,4714,4851,5185,6197,6713,7909,8150,9353,9673,12122,17100,17492,23760,24156,49631,60170,89985,116931,120259,133955,136656,140978,145375&chds=0,159912.78270000004&chxt=y&chxl=0:|xml%2Fxstream|woodstox-xstream|aalto-xstream|json%2Fgoogle-gson|fastinfo-xstream|json%2Fprotobuf|scala%2Fjava-built-in|java-built-in|xml%2Fxstream%2Bc|woodstox-xstream%2Bc|fastinfo-xstream%2Bc|aalto-xstream%2Bc|xml%2Fmanual-fastinfo|hessian|xml%2Fmanual-woodstox|xml%2Fjavolution|avro-generic|avro|json%2Fjackson-databind|xml%2Fmanual-aalto|thrift-compact|thrift|json%2Fjackson-manual|json%2Fprotostuff|scala%2Fsbinary|protobuf%2Factivemq%2Balt|protobuf%2Fprotostuff-runtime|protobuf|protostuff-core-ge|kryo|protobuf%2Fprotostuff|kryo-opt|java-manual&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=6,0,6&nonsense=aaa.png'/>

== Serialized Size ("size") ==

The size of the serialized data.  These numbers may vary depending on the exact data value being used.
 * Java's built-in serializer stores the full class name in serialized form.  So you don't need to know ahead of time what kind of object you're reading in.
 * The 'scala' test, which uses Java's built-in serialization, yields a larger serialized representation because it usually creates more Java classes under the hood.

<img src='http://chart.apis.google.com/chart?chtt=size&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x426&chd=t:219,221,221,233,239,239,239,239,240,241,255,255,293,333,349,360,381,398,419,419,432,444,486,488,495,495,501,503,758,796,796,889,1312&chds=0,1443.2&chxt=y&chxl=0:|scala%2Fjava-built-in|java-built-in|woodstox-xstream|aalto-xstream|xml%2Fxstream|json%2Fjackson-databind|hessian|xml%2Fmanual-woodstox|xml%2Fmanual-aalto|json%2Fprotobuf|json%2Fgoogle-gson|fastinfo-xstream|xml%2Fjavolution|woodstox-xstream%2Bc|aalto-xstream%2Bc|json%2Fjackson-manual|xml%2Fxstream%2Bc|json%2Fprotostuff|thrift|xml%2Fmanual-fastinfo|fastinfo-xstream%2Bc|java-manual|scala%2Fsbinary|protobuf%2Fprotostuff-runtime|thrift-compact|protobuf%2Factivemq%2Balt|protobuf|protobuf%2Fprotostuff|protostuff-core-ge|kryo|avro-generic|avro|kryo-opt&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=6,0,6&nonsense=aaa.png'/>

== Serialization Compressed Size ("size+dfl") ==

The size of the serialized data compressed with Java's built-in implementation of DEFLATE (zlib).

<img src='http://chart.apis.google.com/chart?chtt=size%2Bdfl&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x426&chd=t:133,133,135,147,147,147,149,149,149,149,150,150,191,195,205,220,227,236,236,239,250,253,259,267,267,270,313,313,323,344,344,517,700&chds=0,770.0000000000001&chxt=y&chxl=0:|scala%2Fjava-built-in|java-built-in|woodstox-xstream|aalto-xstream|fastinfo-xstream|hessian|xml%2Fxstream|json%2Fjackson-databind|xml%2Fmanual-woodstox|xml%2Fmanual-aalto|json%2Fgoogle-gson|json%2Fprotobuf|xml%2Fmanual-fastinfo|xml%2Fjavolution|woodstox-xstream%2Bc|aalto-xstream%2Bc|fastinfo-xstream%2Bc|json%2Fjackson-manual|xml%2Fxstream%2Bc|thrift|json%2Fprotostuff|protobuf%2Fprotostuff-runtime|protostuff-core-ge|protobuf%2Factivemq%2Balt|protobuf|protobuf%2Fprotostuff|thrift-compact|kryo|java-manual|scala%2Fsbinary|kryo-opt|avro-generic|avro&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=6,0,6&nonsense=aaa.png'/>

== Object Creation Time ("create") ==

Object creation is not so meaningful since it takes in average 100 nano to create an object.  However, the different tools vary in how "fancy" their objects are.  Some just create a plain Java class and let you access fields directly, while others have set/get methods, while others use the "builder" pattern.
 * Protobuf and Thrift use the "builder" pattern to create objects, which makes the operation more expensive.
 * Avro stores Strings in UTF8 form.  The time taken to convert from Java "String" values to UTF-8 is included under "create", "ser", "deser+shal", and "deser+deep", which isn't quite representative of real-world usage.  Real code that uses Avro might be able to keep strings in UTF-8 form, thus avoiding the need to convert back and forth (in which case the "ser+same" and "deser" results might be more accurate reflections of Avro's performance).

<img src='http://chart.apis.google.com/chart?chtt=create&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x426&chd=t:215,218,218,221,223,223,224,224,224,224,224,225,225,225,225,226,227,228,228,228,229,354,356,359,376,419,421,489,492,729,734,1834,2486&chds=0,2735.1673305&chxt=y&chxl=0:|avro-generic|avro|scala%2Fjava-built-in|scala%2Fsbinary|protobuf|json%2Fprotobuf|thrift-compact|thrift|protobuf%2Factivemq%2Balt|protostuff-core-ge|json%2Fprotostuff|protobuf%2Fprotostuff|hessian|java-built-in|xml%2Fxstream|aalto-xstream|json%2Fjackson-databind|fastinfo-xstream|xml%2Fmanual-fastinfo|fastinfo-xstream%2Bc|aalto-xstream%2Bc|json%2Fjackson-manual|xml%2Fmanual-aalto|woodstox-xstream%2Bc|kryo-opt|xml%2Fjavolution|java-manual|woodstox-xstream|xml%2Fmanual-woodstox|json%2Fgoogle-gson|kryo|protobuf%2Fprotostuff-runtime|xml%2Fxstream%2Bc&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=6,0,6&nonsense=aaa.png'/>

= Numbers =

Times are in nanoseconds, sizes are in bytes.
{{{
                             create     ser   +same   deser   +shal   +deep   total   size  +dfl
protobuf                        493    4321    2170    2505    2475    2592    6913    239   149
thrift                          420    4265    3955    4555    4677    4852    9116    349   195
thrift-compact                  421    4008    3587    4921    4943    5185    9194    240   149
protobuf/activemq+alt           377    4228       9      21    1452    2851    7079    239   149
protobuf/protostuff             354    2543    2259    2256    2329    2430    4972    239   149
protobuf/protostuff-runtime     218    2971    2714    2276    2599    2685    5655    241   150
protostuff-core-ge              360    2394    2093    2306    2374    2463    4857    239   150
kryo                            218    2194    1975    2344    2399    2459    4653    233   147
kryo-opt                        224    2009    1859    2135    2195    2290    4299    219   135
avro                           1834    4615    2745    5986    7253    7910   12524    221   133
avro-generic                   2487    5139    2500    5741    7226    8150   13289    221   133
hessian                         229   11342   10190   11809   11928   12122   23465    501   313
java-built-in                   229   13300   11920   59546   59997   60170   73470    889   517
java-manual                     224    1785    1641    1316    1383    1470    3255    255   147
scala/java-built-in             735   20712   17725   88832   89689   89985  110697   1312   700
scala/sbinary                   729    4179    3313    2973    3246    3480    7658    255   147
json/jackson-manual             225    6724    6407    4480    4548    4715   11438    398   220
json/jackson-databind           228   10243   10007    6427    6545    6714   16957    503   270
json/protostuff                 356    7803    7417    4390    4476    4610   12413    360   191
json/protobuf                   490   21574   20741  118981  117442  116931  138505    488   253
json/google-gson                222   85377   84214  132049  132243  133955  219332    486   259
xml/manual-woodstox             224    6751    6643    9411    9706    9674   16425    495   267
xml/manual-aalto                225    4591    4233    5887    6062    6197   10788    495   267
xml/manual-fastinfo             226   14573   14088   16717   16913   17100   31673    333   250
xml/xstream                     228   86232   83546  144869  145887  145375  231607    758   313
xml/xstream+c                   216   15167   13999   49485   49520   49631   64798    381   205
woodstox-xstream                224   87227   83594  141683  140938  140978  228206    796   344
woodstox-xstream+c              225   12814   11532   23969   23940   24157   36971    419   236
aalto-xstream                   228   85534   81470  136335  134452  136656  222190    796   344
aalto-xstream+c                 225   10630    9260   16936   17338   17493   28123    419   236
fastinfo-xstream                227  104650  101092  121203  119823  120260  224910    444   323
fastinfo-xstream+c              226   19543   18028   23224   23466   23761   43304    293   227
xml/javolution                  224    5343    5224    9135    9229    9353   14696    432   239
}}}

Columns:
 * create: create an object (using the classes specified by the serialization tool)
 * ser: create an object and serialize it
 * +same: serialize the same object (i.e. doesn't include creation time)
 * deser: deserialize an object
 * +shal: deserialize an object and access the top-level fields
 * +deep: deserialize an object and access all the fields
 * total: create + serialize + deserialize and access all fields
 * size: the size of the serialized data
 * +dfl: the size of the serialized data compressed with Java's built-in implementation of DEFLATE (zlib)