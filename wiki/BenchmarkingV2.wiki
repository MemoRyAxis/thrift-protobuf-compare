*WARNING*: Benchmarks can be misleading.
 * These tests use a specific data value (DataStructuresV2).  A different data value will yield different results.
 * The tools have different sets of features (BeyondNumbers).  Some of these features make things safer or easier, but come with a performance cost.
 * Different hardware and software environments will yield different results.
 * We don't take memory usage into account.

In short, before you make a decision on which tool to use, make sure you try it out in an environment you care about.  To start, download the benchmark code and run it on _your_ hardware with data values _you_ care about.

== Setup ==

Hardware: Intel Core 2 Duo
Software: Sun JRE 1.6.0-17 (64-bit server VM), Mac OS 10.5
JVM options: -Xmx16m -server

Data value being tested: DataStructuresV2.

Version of the benchmarking code: <a href="http://code.google.com/p/thrift-protobuf-compare/source/browse/?r=187">Revision 187</a>

Methodology:
 * Before taking measurements, we warm things up by running the test several times.
 * For a test, measure the time taken to perform 2000 operations (serialization, deserialization, etc.).  Then divide the result by 2000.
 * Run each test 100 times and report the best result.
 * Look at the code for more details (tpc/src/serializers/BenchmarkRunner.java)

Tool Versions:
 * [http://code.google.com/p/protobuf/ protobuf] 2.3.0
 * [http://incubator.apache.org/thrift/ thrift] 0.2.0
 * [http://hadoop.apache.org/avro/ avro] 1.3.2
 * [http://code.google.com/p/kryo/ kryo] 1.0
 * [http://hessian.caucho.com/ hessian] 4.0.3
 * [http://activemq.apache.org/ activemq-protobuf] 1.1-SNAPSHOT
 * [http://scala-lang.org/ scala] 2.8.0-rc1
 * [http://github.com/harrah/sbinary sbinary] 0.3.1-SNAPSHOT
 * [http://code.google.com/p/google-gson/ google-gson] 1.4
 * [http://jackson.codehaus.org/ jackson] 1.5.1
 * [http://javolution.org/ javolution] 5.2.6
 * [http://code.google.com/p/protostuff/ protostuff] 1.0.0.M0
 * [http://woodstox.codehaus.org/ woodstox] 4.0.7
 * [http://www.cowtowncoder.com/hatchery/aalto/index.html aalto] 0.9.5
 * [http://fi.dev.java.net/ fast-infoset] 1.2.6
 * [http://xstream.codehaus.org/ xstream] 1.3.1

= Charts =

== Total Time ("total") ==

Create an object, serialize it to a byte array, then deserialize it back to an object.

<img src='http://chart.apis.google.com/chart?chtt=total&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x407&chd=t:3417,3913,4339,4661,6884,7309,8156,9209,9555,10235,10925,11397,12862,15106,18465,21734,32848,39997,40635,52218,81644,84626,126884,159024,224372,230004,235604,236774,242116&chds=0,266327.60000000003&chxt=y&chxl=0:|json%2Fgoogle-gson|xml-fi%2Fsun-xstream|xml%2Fxstream|xml%2Fwoodstox-xstream|xml%2Faalto-xstream|json%2Fprotobuf|scala%2Fjava-built-in|java-built-in|cks-text|xml%2Fxstream%2Bc|xml-fi%2Fsun-xstream%2Bc|xml%2Fwoodstox-xstream%2Bc|xml%2Faalto-xstream%2Bc|hessian|json%2Fjackson-databind|xml%2Fjavolution|avro-generic|json%2Fprotostuff|avro|json%2Fprotostuff-numeric|json%2Fjackson|thrift|scala%2Fsbinary|protobuf|protobuf%2Factivemq%2Balt|kryo|kryo-opt|cks|java-manual&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=7,0,6&nonsense=aaa.png'/>

== Serialization Time ("ser") ==

Create an object, serialize it to a byte array.
 * Java's built-in serializer faithfully represents arbitrary object graphs, which hurts performance.  All the other serializers flatten the structure out to a tree.

<img src='http://chart.apis.google.com/chart?chtt=ser&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x407&chd=t:1931,2006,2089,2199,4033,4104,4148,4571,4718,4758,5096,5329,5884,6073,7401,8361,10517,12363,13770,15503,18862,21165,21999,29807,90269,92332,96061,100712,114897&chds=0,126387.25000000001&chxt=y&chxl=0:|xml-fi%2Fsun-xstream|json%2Fgoogle-gson|xml%2Fxstream|xml%2Fwoodstox-xstream|xml%2Faalto-xstream|cks-text|json%2Fprotobuf|scala%2Fjava-built-in|xml-fi%2Fsun-xstream%2Bc|xml%2Fxstream%2Bc|java-built-in|xml%2Fwoodstox-xstream%2Bc|xml%2Faalto-xstream%2Bc|hessian|json%2Fjackson-databind|xml%2Fjavolution|avro-generic|json%2Fprotostuff|json%2Fprotostuff-numeric|json%2Fjackson|avro|scala%2Fsbinary|thrift|protobuf|protobuf%2Factivemq%2Balt|kryo|cks|kryo-opt|java-manual&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=7,0,6&nonsense=aaa.png'/>

== Deserialization Time ("deser+deep") ==

Often the most expensive operation.  To make a fair comparison, all fields of the deserialized instances are accessed - this forces lazy deserializers to really do their work. The raw data below shows additional measurements for deserialization.

<img src='http://chart.apis.google.com/chart?chtt=deser%2Bdeep&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x407&chd=t:1486,1824,2333,2462,2851,3205,3585,4797,5060,5138,6067,6207,6978,9033,11064,13373,21773,22331,27634,36714,51837,70856,105718,121876,134103,137024,137671,139543,141404&chds=0,155544.40000000002&chxt=y&chxl=0:|json%2Fgoogle-gson|xml%2Fxstream|xml%2Fwoodstox-xstream|json%2Fprotobuf|xml%2Faalto-xstream|xml-fi%2Fsun-xstream|scala%2Fjava-built-in|java-built-in|cks-text|xml%2Fxstream%2Bc|xml%2Fwoodstox-xstream%2Bc|xml%2Faalto-xstream%2Bc|xml-fi%2Fsun-xstream%2Bc|hessian|json%2Fjackson-databind|xml%2Fjavolution|avro-generic|avro|json%2Fprotostuff|json%2Fprotostuff-numeric|thrift|json%2Fjackson|scala%2Fsbinary|protobuf|protobuf%2Factivemq%2Balt|kryo|kryo-opt|cks|java-manual&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=7,0,6&nonsense=aaa.png'/>

== Serialized Size ("size") ==

The size of the serialized data.  These numbers may vary depending on the exact data value being used.
 * Java's built-in serializer stores the full class name in serialized form.  So you don't need to know ahead of time what kind of object you're reading in.
 * The 'scala' test, which uses Java's built-in serialization, yields a larger serialized representation because it usually creates more Java classes under the hood.

<img src='http://chart.apis.google.com/chart?chtt=size&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x407&chd=t:219,221,221,233,239,239,240,255,255,293,349,377,381,398,419,419,432,444,466,486,488,501,503,520,758,796,796,889,1258&chds=0,1383.8000000000002&chxt=y&chxl=0:|scala%2Fjava-built-in|java-built-in|xml%2Fwoodstox-xstream|xml%2Faalto-xstream|xml%2Fxstream|cks-text|json%2Fjackson-databind|hessian|json%2Fprotobuf|json%2Fgoogle-gson|json%2Fprotostuff|xml-fi%2Fsun-xstream|xml%2Fjavolution|xml%2Faalto-xstream%2Bc|xml%2Fwoodstox-xstream%2Bc|json%2Fjackson|xml%2Fxstream%2Bc|json%2Fprotostuff-numeric|thrift|xml-fi%2Fsun-xstream%2Bc|java-manual|scala%2Fsbinary|cks|protobuf%2Factivemq%2Balt|protobuf|kryo|avro-generic|avro|kryo-opt&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=7,0,6&nonsense=aaa.png'/>

== Serialization Compressed Size ("size+dfl") ==

The size of the serialized data compressed with Java's built-in implementation of DEFLATE (zlib).

<img src='http://chart.apis.google.com/chart?chtt=size%2Bdfl&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x407&chd=t:133,133,135,142,147,147,147,149,149,195,205,208,220,227,236,236,239,251,253,259,268,270,313,313,323,344,344,517,696&chds=0,765.6&chxt=y&chxl=0:|scala%2Fjava-built-in|java-built-in|xml%2Fwoodstox-xstream|xml%2Faalto-xstream|xml-fi%2Fsun-xstream|hessian|xml%2Fxstream|json%2Fjackson-databind|cks-text|json%2Fgoogle-gson|json%2Fprotobuf|json%2Fprotostuff|xml%2Fjavolution|xml%2Faalto-xstream%2Bc|xml%2Fwoodstox-xstream%2Bc|xml-fi%2Fsun-xstream%2Bc|json%2Fjackson|json%2Fprotostuff-numeric|xml%2Fxstream%2Bc|thrift|protobuf%2Factivemq%2Balt|protobuf|kryo|java-manual|scala%2Fsbinary|cks|kryo-opt|avro-generic|avro&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=7,0,6&nonsense=aaa.png'/>

== Object Creation Time ("create") ==

Object creation is not so meaningful since it takes in average 100 nano to create an object.  However, the different tools vary in how "fancy" their objects are.  Some just create a plain Java class and let you access fields directly, while others have set/get methods, while others use the "builder" pattern.
 * Protobuf and Thrift use the "builder" pattern to create objects, which makes the operation more expensive.
 * Avro stores Strings in UTF8 form.  The time taken to convert from Java "String" values to UTF-8 is included under "create", "ser", "deser+shal", and "deser+deep", which isn't quite representative of real-world usage.  Real code that uses Avro might be able to keep strings in UTF-8 form, thus avoiding the need to convert back and forth (in which case the "ser+same" and "deser" results might be more accurate reflections of Avro's performance).

<img src='http://chart.apis.google.com/chart?chtt=create&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x407&chd=t:146,147,147,147,147,147,148,148,148,148,148,148,148,148,149,149,149,274,293,294,333,385,385,386,387,769,770,1860,3108&chds=0,3418.9045&chxt=y&chxl=0:|avro-generic|avro|scala%2Fjava-built-in|scala%2Fsbinary|json%2Fprotobuf|protobuf|json%2Fprotostuff-numeric|json%2Fprotostuff|thrift|cks-text|cks|protobuf%2Factivemq%2Balt|json%2Fjackson|xml%2Fwoodstox-xstream%2Bc|xml%2Faalto-xstream|json%2Fjackson-databind|kryo|java-manual|xml%2Fxstream|xml%2Fwoodstox-xstream|xml%2Faalto-xstream%2Bc|xml%2Fjavolution|kryo-opt|hessian|java-built-in|xml%2Fxstream%2Bc|xml-fi%2Fsun-xstream|json%2Fgoogle-gson|xml-fi%2Fsun-xstream%2Bc&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=7,0,6&nonsense=aaa.png'/>

= Numbers =

Times are in nanoseconds, sizes are in bytes.
{{{
                         create     ser   +same   deser   +shal   +deep   total   size  +dfl
protobuf                    386    4105    2069    2356    2434    3205    7310    239   149
thrift                      334    4149    3831    4777    4897    5061    9209    349   195
protobuf/activemq+alt       274    4034      14      16    1467    2851    6885    239   149
kryo                        149    2199    2036    2332    2395    2462    4661    233   147
kryo-opt                    148    2007    1876    2207    2276    2333    4340    219   135
cks                         294    2090    2069    2079    1743    1824    3914    240   142
avro                       1861    4719    2806    4500    5636    6207   10926    221   133
avro-generic               3108    5884    2577    4132    5749    6978   12862    221   133
hessian                     148    8362    7099   13142   13268   13373   21735    501   313
java-built-in               148   13770   12187   70410   70673   70857   84627    889   517
java-manual                 149    1931    1802    1339    1736    1486    3417    255   147
scala/java-built-in         770   21166   16642  103612  104793  105719  126884   1258   696
scala/sbinary               770    4572    3561    3849    4079    3585    8157    255   147
json/jackson                149    4758    4597    4576    4602    4798    9556    398   220
json/jackson-databind       149    7402    7139   10811   10927   11064   18466    503   270
json/protostuff             386    5330    4851    5692    5807    6068   11397    466   251
json/protostuff-numeric     386    5097    4558    4827    4895    5139   10235    377   208
cks-text                    294   29807   28744   50999   51262   51838   81645    520   268
json/protobuf               388   22000   21194  135762  136418  137025  159024    488   253
json/google-gson            147  100712  101208  138597  138329  141404  242116    486   259
xml/xstream                 149   96062   92926  133830  147629  139543  235605    758   313
xml/xstream+c               148   15504   14027   36477   36910   36715   52218    381   205
xml-fi/sun-xstream          147  114898  112232  121610  121170  121877  236774    444   323
xml-fi/sun-xstream+c        147   18863   16987   21227   21511   21773   40636    293   227
xml/woodstox-xstream        148   92333   89146  139552  137685  137672  230004    796   344
xml/woodstox-xstream+c      149   12364   10148   27440   27779   27634   39998    419   236
xml/aalto-xstream           149   90269   86334  133530  134279  134103  224372    796   344
xml/aalto-xstream+c         148   10517    8566   21804   22125   22332   32849    419   236
xml/javolution              148    6073    5906    8703    8893    9034   15107    432   239
}}}

Columns:
 * create: create an object (using the classes specified by the serialization tool)
 * ser: create an object and serialize it
 * +same: serialize the same object (i.e. doesn't include creation time)
 * deser: deserialize an object
 * +shal: deserialize an object and access the top-level fields
 * +deep: deserialize an object and access all the fields
 * total: create + serialize + deserialize and access all fields
 * size: the size of the serialized data
 * +dfl: the size of the serialized data compressed with Java's built-in implementation of DEFLATE (zlib)
