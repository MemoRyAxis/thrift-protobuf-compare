= Intro =
Started with <a href="http://www.eishay.com/search/label/protobuf">few blog posts</a> and with the help of many contributes, this project is now benchmarking much more then just protobuf and thrift. Thanks to all who looked at the code, contributed, suggested and pointed bugs. Three major contributions are from <a href="http://www.cowtowncoder.com/blog/blog.html">cowtowncoder</a> who fixed the <a href="http://stax.codehaus.org/">stax</a> code, <a href="http://www.samsarin.com">Chris Pettitt</a> who added the <a href="http://www.json.org/">json</a> code and <a href="http://github.com/davidB">David Bernard</a> for the xstream and java <a href="http://java.sun.com/j2se/1.3/docs/api/java/io/Externalizable.html">externalizable</a>.
The charts below are displaying the latest results. Note that the charts are scaled to best fit the results and they might be misleading in come cases. If you wish to see the numbers scroll down to the chart at the end of the page. Overall we have benchmarks for [http://code.google.com/p/protobuf/ protobuf], [http://incubator.apache.org/thrift/ thrift], [http://java.sun.com/j2se/1.4.2/docs/api/java/io/Serializable.html java], [http://www.scala-lang.org/ scala], few implementations of [http://stax.codehaus.org/ stax], [http://download.oracle.com/docs/cd/B28359_01/appdev.111/b28394/adx_j_xmlbin.htm binaryxml], [http://www.json.org/java/ json], [http://xstream.codehaus.org/ xstream], [http://javolution.org/ javolution], [http://hessian.caucho.com/ hessian], [http://hadoop.apache.org/avro/ avro], [http://code.google.com/p/sbinary/ sbinary], [http://code.google.com/p/jsonmarshaller/ JSON Marshaller], and [http://code.google.com/p/kryo/ Kryo].

= Numbers are not everything =
Benchmarks can be very misleading. Different datasets will provide different results and sometimes the marginal performance boost is eclipsed by other features like <a href="http://www.eishay.com/2009/04/protocol-buffers-forward-backward.html">forward and backward compatibility</a>, cross language support, simpler API, and more. 

= Charts =

==Setup==
The following measurements were performed with revision <a href="http://code.google.com/p/thrift-protobuf-compare/source/browse/?r=117">r117</a> on Windows 7 64-bit using Sun's JVM 1.6.0_15 JRE 32-bit, with an Intel Core i7 920 CPU. Note the tests are run with a JVM heap size of 16MB.

Omitted from the first three charts: json/google-gson, hessian and scala. These serializers are so slow, they would break the scale of our charts. See below for the naked data.

==Total Time==
Including creating an object, serializing and deserializing:

<img src='http://chart.apis.google.com/chart?chtt=totalTime&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=689x430&chd=t:5067.1255,6161.7075,6516.197,6585.169,6635.6995,6870.6765000000005,7164.449500000001,7572.1565,7583.108,8937.2625,9230.457,9624.521499999999,10333.301,14282.4045,15154.88,22990.836,25791.7515,31670.639,41680.9645,64029.691&chds=0,70000.11130000002&chxt=y&chxl=0:|java|json/jackson-databind|JsonMarshaller|xstream%20%28stax%20with%20conv%29|binaryxml/FI|javolution%20xmlformat|stax/woodstox|protostuff-json|protostuff-numeric-json|stax/aalto|json%20%28jackson%29|thrift|avro-generic|sbinary|activemq%20protobuf|kryo-optimized|kryo|protobuf|avro-specific|java%20%28externalizable%29&chm=N%20*f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=10&nonsense=aaa.png'/>

==Serialization Time==
Serializing with a new object each time (object creation time included):

<img src='http://chart.apis.google.com/chart?chtt=timeSerializeDifferentObjects&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=689x430&chd=t:2246.804,3585.7795,3630.7385,3821.1425,3835.7445,3883.778,3987.3375,4138.162,4261.319,4366.416,4377.56,4587.177,4648.6595,4777.773,4950.693,8770.6825,10668.573,12051.7395,12402.1895,17931.5875&chds=0,20000.1311&chxt=y&chxl=0:|json/jackson-databind|java|binaryxml/FI|JsonMarshaller|xstream%20%28stax%20with%20conv%29|stax/woodstox|avro-generic|javolution%20xmlformat|protostuff-json|json%20%28jackson%29|protostuff-numeric-json|sbinary|activemq%20protobuf|protobuf|stax/aalto|kryo|avro-specific|kryo-optimized|thrift|java%20%28externalizable%29&chm=N%20*f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=10&nonsense=aaa.png'/>

==Deserialization Time==
Often the most expensive operation. To make a fair comparison, all fields of the deserialized instances are accessed - this forces lazy deserializers to really do their work. The raw data below shows additional measurements for deserialization.

<img src='http://chart.apis.google.com/chart?chtt=timeDeserialize&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=689x430&chd=t:2340.565,2528.8595,2732.5145,2749.4245,2794.3835,2820.3215,2903.1305,3004.961,3997.3285,4559.7025,5258.1055,5346.679,5746.124,9331.7115,10506.2205,10939.0965,17021.069,21002.066,23749.377,51627.5015&chds=0,56777.9802&chxt=y&chxl=0:|java|json/jackson-databind|JsonMarshaller|xstream%20%28stax%20with%20conv%29|binaryxml/FI|javolution%20xmlformat|stax/woodstox|protostuff-json|stax/aalto|protostuff-numeric-json|json%20%28jackson%29|thrift|kryo-optimized|sbinary|java%20%28externalizable%29|avro-generic|kryo|activemq%20protobuf|protobuf|avro-specific&chm=N%20*f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=10&nonsense=aaa.png'/>

==Serialization Size==
May vary a lot depending on number of repetitions in lists, usage of number compacting in protobuf, strings vs numerics, assumptions that can be made about the object graph, and more. Interesting point is Scala and Java which holds the name of the classes in the serialized form. I.e. longer class names = larger serialized form. In Scala its worse since the Scala compiler creates more implicit classes then java.

<img src='http://chart.apis.google.com/chart?chtt=serializedSize&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=689x430&chd=t:207.0,211.0,211.0,226.0,231.0,231.0,264.0,273.0,300.0,353.0,359.0,370.0,378.0,399.0,419.0,448.0,470.0,475.0,475.0,541.0,919.0,1851.0,2024.0&chds=0,2226.4&chxt=y&chxl=0:|scala|json/jackson-databind|java|hessian|stax/woodstox|stax/aalto|json/google-gson|protostuff-json|javolution%20xmlformat|xstream%20%28stax%20with%20conv%29|json%20%28jackson%29|JsonMarshaller|protostuff-numeric-json|thrift|binaryxml/FI|java%20%28externalizable%29|sbinary|protobuf|activemq%20protobuf|kryo|avro-specific|avro-generic|kryo-optimized&chm=N%20*f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=10&nonsense=aaa.png'/>

==Object Creation Time==
Object creation is not so meaningful since it takes in average 100 nano to create an object. The surprise comes from <a href="http://code.google.com/p/protobuf/">protobuf</a> which takes a very long time to create an object. Its the only point in this set of benchmarks where it didn't perform as well as <a href="http://incubator.apache.org/thrift/">thrift</a>. Scala (and to a lesser point - java) on the other hand is fast, seems like its a good language to handle in memory data structures but when coming to serialization you might want to check the alternatives.

<img src='http://chart.apis.google.com/chart?chtt=timeCreate&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=689x430&chd=t:62.70647,64.33576,78.042535,80.196345,80.588295,80.67091,81.105135,81.35875,82.01392,82.069645,82.28867,82.682545,82.84586,83.17249,83.7681,84.048615,132.014635,148.79554,194.484785,194.85368,207.98021,1618.87677,2636.90154&chds=0,2900.591694&chxt=y&chxl=0:|avro-generic|avro-specific|protobuf|protostuff-json|protostuff-numeric-json|thrift|activemq%20protobuf|javolution%20xmlformat|binaryxml/FI|stax/aalto|xstream%20%28stax%20with%20conv%29|json/google-gson|stax/woodstox|JsonMarshaller|json%20%28jackson%29|json/jackson-databind|kryo|hessian|java|kryo-optimized|java%20%28externalizable%29|sbinary|scala&chm=N%20*f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=10&nonsense=aaa.png'/>

= Numbers =
Times are in nanoseconds, sizes are in bytes.
{{{
                         ,   Object create,       Serialize,  /w Same Object,     Deserialize, and Check Media,   and Check All,      Total Time, Serialized Size
 avro-generic            ,      2636.90154,      4777.77300,      2129.21750,      2794.38350,             NaN,             NaN,      7572.15650,        211
 avro-specific           ,      1618.87677,      3821.14250,      1422.36050,      2340.56500,             NaN,             NaN,      6161.70750,        211
 activemq protobuf       ,       132.01464,      4138.16200,        49.95100,        11.33600,      1453.87200,      2732.51450,      6870.67650,        231
 protobuf                ,       207.98021,      3987.33750,      2124.60400,      2123.64700,      2285.04250,      2528.85950,      6516.19700,        231
 thrift                  ,       148.79554,      3585.77950,      3482.79850,      3997.32850,             NaN,             NaN,      7583.10800,        353
 hessian                 ,        80.67091,    148390.90450,    145777.89950,     35388.79850,             NaN,             NaN,    183779.70300,        541
 kryo                    ,        81.10514,      3835.74450,      3890.50000,      2749.42450,             NaN,             NaN,      6585.16900,        226
 kryo-optimized          ,        80.19635,      3630.73850,      3680.49950,      3004.96100,             NaN,             NaN,      6635.69950,        207
 java                    ,        80.58830,     12402.18950,     11235.55850,     51627.50150,             NaN,             NaN,     64029.69100,        919
 java (externalizable)   ,        78.04254,      2246.80400,      2302.32750,      2820.32150,             NaN,             NaN,      5067.12550,        273
 scala                   ,        62.70647,     30858.30100,     29399.62850,    137979.98200,             NaN,             NaN,    168838.28300,       2024
 json (jackson)          ,        82.01392,      4377.56000,      4369.68450,      4559.70250,             NaN,             NaN,      8937.26250,        378
 json/jackson-databind   ,        81.35875,     17931.58750,     17984.80800,     23749.37700,             NaN,             NaN,     41680.96450,       1851
 JsonMarshaller          ,        82.06965,     10668.57300,     10515.83150,     21002.06600,             NaN,             NaN,     31670.63900,        370
 protostuff-json         ,       194.85368,      4587.17700,      4493.80250,      5746.12400,             NaN,             NaN,     10333.30100,        448
 protostuff-numeric-json ,       194.48479,      4366.41600,      4292.64050,      5258.10550,             NaN,             NaN,      9624.52150,        359
 json/google-gson        ,        82.84586,    234575.26850,    234675.56700,    289649.82950,             NaN,             NaN,    524225.09800,        470
 stax/woodstox           ,        82.28867,      4950.69300,      4972.21200,      9331.71150,             NaN,             NaN,     14282.40450,        475
 stax/aalto              ,        83.17249,      3883.77800,      3991.37550,      5346.67900,             NaN,             NaN,      9230.45700,        475
 binaryxml/FI            ,        83.76810,     12051.73950,     12226.01100,     10939.09650,             NaN,             NaN,     22990.83600,        300
 xstream (stax with conv),        82.68255,      8770.68250,      7996.19650,     17021.06900,             NaN,             NaN,     25791.75150,        399
 javolution xmlformat    ,        84.04862,      4648.65950,      4614.65050,     10506.22050,             NaN,             NaN,     15154.88000,        419
 sbinary                 ,        64.33576,      4261.31900,      4312.04550,      2903.13050,             NaN,             NaN,      7164.44950,        264
}}}