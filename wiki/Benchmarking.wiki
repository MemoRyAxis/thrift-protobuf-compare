= Intro =
Started with <a href="http://www.eishay.com/search/label/protobuf">few blog posts</a> and with the help of many contributes, this project is now benchmarking much more then just protobuf and thrift. Thanks to all who looked at the code, contributed, suggested and pointed bugs. Three major contributions are from <a href="http://www.cowtowncoder.com/blog/blog.html">cowtowncoder</a> who fixed the <a href="http://stax.codehaus.org/">stax</a> code, <a href="http://www.samsarin.com">Chris Pettitt</a> who added the <a href="http://www.json.org/">json</a> code and <a href="http://github.com/davidB">David Bernard</a> for the xstream and java <a href="http://java.sun.com/j2se/1.3/docs/api/java/io/Externalizable.html">externalizable</a>.
The charts below are displaying the latest results. Note that the charts are scaled to best fit the results and they might be misleading in come cases. If you wish to see the numbers scroll down to the chart at the end of the page. Overall we have benchmarks for [http://code.google.com/p/protobuf/ protobuf], [http://incubator.apache.org/thrift/ thrift], [http://java.sun.com/j2se/1.4.2/docs/api/java/io/Serializable.html java], [http://www.scala-lang.org/ scala], few implementations of [http://stax.codehaus.org/ stax], [http://download.oracle.com/docs/cd/B28359_01/appdev.111/b28394/adx_j_xmlbin.htm binaryxml], [http://www.json.org/java/ json], [http://xstream.codehaus.org/ xstream], [http://javolution.org/ javolution], [http://hessian.caucho.com/ hessian], [http://hadoop.apache.org/avro/ avro], [http://code.google.com/p/sbinary/ sbinary] and [http://code.google.com/p/jsonmarshaller/ JSON Marshaller].

= Numbers are not everything =
Benchmarks can be very misleading. Different datasets will provide different results and sometimes the marginal performance boost is eclipsed by other features like <a href="http://www.eishay.com/2009/04/protocol-buffers-forward-backward.html">forward and backward compatibility</a>, cross language support, and more. 

= Charts =
==Total Time==
Including creating an object, serializing and deserializing

<img src='http://chart.apis.google.com/chart?chtt=totalTime&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=689x390&chd=t:4565.22903,5227.99975,5538.7479299999995,5868.525729999999,6017.94514,6085.915655,6720.30128,7082.793465,9073.479715,12370.532475,12858.382160000001,17798.35892,19453.932249999998,23543.673,27151.601765,34814.003635,58940.046945,156672.0742,191558.19539,196323.10311999999,1117383.3214800002&chds=0,183336&chxl=0:|hessian|xstream (xpp)|xstream (stax)|scala|java|xstream (xpp with conv)|JsonMarshaller|xstream (stax with conv)|binaryxml/FI|java (externalizable)|javolution xmlformat|stax/woodstox|stax/aalto|thrift|avro-generic|kryo-optimized|json (jackson)|kryo|sbinary|protobuf|avro-specific&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=10&chxt=y&nonsense=aaa.png'/>

==Serialization Time==
Serializing with a new object each time (object creation time not included)

<img src='http://chart.apis.google.com/chart?chtt=timeSer&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=689x390&chd=t:1557.0505,2101.171,2332.3095,3007.459,3265.295,3381.542,3473.189,3570.3965,3599.404,4019.801,4266.4975,4562.1935,8711.6945,9568.2235,9855.6445,10969.643,11972.9555,27947.0935,74171.238,79780.947,1082814.742&chds=0,129040&chxl=0:|hessian|xstream (xpp)|xstream (stax)|scala|xstream (xpp with conv)|java|JsonMarshaller|binaryxml/FI|xstream (stax with conv)|java (externalizable)|stax/woodstox|javolution xmlformat|kryo-optimized|kryo|stax/aalto|thrift|sbinary|protobuf|json (jackson)|avro-generic|avro-specific&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=10&chxt=y&nonsense=aaa.png'/>

==Deserialization Time==
Most expensive operation

<img src='http://chart.apis.google.com/chart?chtt=timeDSer&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=689x390&chd=t:1902.883,1998.9535,2214.908,2220.6745,2412.6155,2558.2515,3572.522,3608.2575,5525.1705,8026.934,8764.341,9809.163,13157.854,14755.052,17218.5835,22764.8845,34491.536,47893.205,116464.7265,117309.155,128664.9855&chds=0,53840&chxl=0:|scala|xstream (stax)|xstream (xpp)|java|hessian|xstream (xpp with conv)|JsonMarshaller|xstream (stax with conv)|java (externalizable)|binaryxml/FI|javolution xmlformat|stax/woodstox|stax/aalto|json (jackson)|thrift|avro-generic|kryo-optimized|kryo|sbinary|protobuf|avro-specific&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=10&chxt=y&nonsense=aaa.png'/>

==Serialization Size==
May vary a lot depending on number of repetitions in lists, usage of number compacting in protobuf, strings vs numerics and more. Interesting point is Scala and Java which holds the name of the classes in the serialized form. I.e. longer class names = larger serialized form. In Scala its worse since the Scala compiler creates more implicit classes then java.

<img src='http://chart.apis.google.com/chart?chtt=length&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=689x390&chd=t:211.0,211.0,217.0,231.0,236.0,264.0,300.0,348.0,353.0,361.0,378.0,397.0,399.0,419.0,475.0,475.0,541.0,833.0,871.0,919.0,2024.0&chds=0,996&chxl=0:|scala|java|xstream (stax)|xstream (xpp)|hessian|stax/woodstox|stax/aalto|javolution xmlformat|xstream (stax with conv)|java (externalizable)|json (jackson)|xstream (xpp with conv)|thrift|JsonMarshaller|binaryxml/FI|sbinary|kryo|protobuf|kryo-optimized|avro-specific|avro-generic&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=10&chxt=y&nonsense=aaa.png'/>

==Object Creation Time==
Object creation is not so meaningful since it takes in average 100 nano to create an object. The surprise comes from <a href="http://code.google.com/p/protobuf/">protobuf</a> which takes a very long time to create an object. Its the only point in this set of benchmarks where it didn't perform as well as <a href="http://incubator.apache.org/thrift/">thrift</a>. Scala (and to a lesser point - java) on the other hand is fast, seems like its a good language to handle in memory data structures but when coming to serialization you might want to check the alternatives.

<img src='http://chart.apis.google.com/chart?chtt=timeCreate&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=689x390&chd=t:58.54493,59.9952,73.896155,74.24016,75.120215,76.163635,76.54575,76.9265,77.04348,77.100975,77.198945,77.373765,77.37814,77.42962,77.45473,77.80239,78.31142,128.729465,221.58725,1105.29553,2060.87878&chds=0,454&chxl=0:|avro-generic|avro-specific|protobuf|thrift|java (externalizable)|xstream (stax)|kryo|xstream (xpp)|json (jackson)|JsonMarshaller|java|stax/woodstox|hessian|xstream (stax with conv)|binaryxml/FI|xstream (xpp with conv)|stax/aalto|javolution xmlformat|kryo-optimized|scala|sbinary&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=10&chxt=y&nonsense=aaa.png'/>

= Numbers =
Times in nano sec, size in bytes
{{{
                        ,   Object create,   Serialization, Deserialization,      Total Time, Serialized Size
avro-generic            ,      2060.87878,      2101.17100,      2558.25150,      6720.30128,        211
avro-specific           ,      1105.29553,      1557.05050,      1902.88300,      4565.22903,        211
protobuf                ,       221.58725,      3007.45900,      1998.95350,      5227.99975,        231
thrift                  ,       128.72947,      3381.54200,      3572.52200,      7082.79347,        353
hessian                 ,        77.04348,   1082814.74200,     34491.53600,   1117383.32148,        541
kryo                    ,        77.45473,      3570.39650,      2220.67450,      5868.52573,        236
kryo-optimized          ,        73.89616,      3599.40400,      2412.61550,      6085.91566,        217
java                    ,        77.19895,     10969.64300,     47893.20500,     58940.04695,        919
java (externalizable)   ,        78.31142,      4562.19350,     13157.85400,     17798.35892,        397
scala                   ,        59.99520,     27947.09350,    128664.98550,    156672.07420,       2024
json (jackson)          ,        77.37814,      2332.30950,      3608.25750,      6017.94514,        378
JsonMarshaller          ,        77.37377,      9855.64450,     17218.58350,     27151.60177,        348
stax/woodstox           ,        77.10098,      4266.49750,      8026.93400,     12370.53248,        475
stax/aalto              ,        75.12022,      3473.18900,      5525.17050,      9073.47972,        475
binaryxml/FI            ,        76.54575,      9568.22350,      9809.16300,     19453.93225,        300
xstream (xpp)           ,        77.42962,     79780.94700,    116464.72650,    196323.10312,        833
xstream (xpp with conv) ,        76.16364,     11972.95550,     22764.88450,     34814.00364,        361
xstream (stax)          ,        77.80239,     74171.23800,    117309.15500,    191558.19539,        871
xstream (stax with conv),        76.92650,      8711.69450,     14755.05200,     23543.67300,        399
javolution xmlformat    ,        74.24016,      4019.80100,      8764.34100,     12858.38216,        419
sbinary                 ,        58.54493,      3265.29500,      2214.90800,      5538.74793,        264
}}}