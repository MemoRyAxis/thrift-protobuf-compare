= Introduction =
With the help of many contributes, this project is now benchmarking much more then just protobuf and thrift. Thanks to all who looked at the code, contributed, suggested and pointed bugs. Tree major contributions are from <a href="http://www.cowtowncoder.com/blog/blog.html">cowtowncoder</a> who fixed the <a href="http://stax.codehaus.org/">stax</a> code, <a href="http://www.samsarin.com">Chris Pettitt</a> who added the <a href="http://www.json.org/">json</a> code and <a href="http://github.com/davidB">David Bernard</a> for the xstream and java <a href="http://java.sun.com/j2se/1.3/docs/api/java/io/Externalizable.html">externalizable</a>.
The charts below are displaying the latest results. Note that the charts are scaled to best fit the results and they might be misleading in come cases. If you wish to see the numbers scroll down to the chart at the end of the page.

= Charts =
<img src='http://chart.apis.google.com/chart?chtt=Serialization&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=1000x300&chd=t:4237.44,4762.496,14601.472,5419.008,36075.392,6272,4944.512,15300.48,3008,36075.392,19242.496,11847.552,3958.528,4214.016&chds=0,36100&chxl=0:|sbinary|javolution+xml+format|xstream+(stax+with+conv)|xstream+(stax)|xstream+(xpp)|json+(jackson)|binaryxml/FI|stax/aalto|stax/woodstox|scala|java+(externalizable)|java|thrift|protobuf&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=10&chxt=y&nonsense=aaa.png'/>
Most expensive operation
<img src='http://chart.apis.google.com/chart?chtt=Deserialization&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=1000x300&chd=t:5082.112,7378.944,73108.48,18635.904,193432.96,9828.48,7803.008,16663.936,4543.104,193432.96,57246.464,25675.52,9916.032,4021.504&chds=2000,80000&chxl=0:|sbinary|javolution+xml+format|xstream+(stax+with+conv)|xstream+(stax)|xstream+(xpp)|json+(jackson)|binaryxml/FI|stax/aalto|stax/woodstox|scala|java+(externalizable)|java|thrift|protobuf&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=10&chxt=y&nonsense=aaa.png'/>

May very a lot depending on number of repetitions in lists, usage of number compacting in protobuf, strings vs numerics and more. Interesting point is Scala and Java which holds the name of the classes in the serialized form. I.e. longer class names = larger serialized form. In Scala its worse since the Scala compiler creates more implicit classes then java.
<img src='http://chart.apis.google.com/chart?chtt=Serialized+size&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=1000x300&chd=t:217,314,845,315,1950,406,406,224,310,931,310,325,345,190&chds=150,1000&chxl=0:|sbinary|javolution+xml+format|xstream+(stax+with+conv)|xstream+(stax)|xstream+(xpp)|json+(jackson)|binaryxml/FI|stax/aalto|stax/woodstox|scala|java+(externalizable)|java|thrift|protobuf&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=10&chxt=y&nonsense=aaa.png'/>
Object creation, not so meaningful since it takes in average 100 nano to create an object. The surprise comes from <a href="http://code.google.com/p/protobuf/">protobuf</a> which takes a very long time to create an object. Its the only point in this set of benchmarks where it didn't perform as well as <a href="http://incubator.apache.org/thrift/">thrift</a>. Scala (and to a lesser point - java) on the other hand is fast, seems like its a good language to handle in memory data structures but when coming to serialization you might want to check the alternatives.
<img src='http://chart.apis.google.com/chart?chtt=Object+creation&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=1000x300&chd=t:429.504,327.6416,223.6544,225.0496,187.904,221.8496,223.2448,224.8448,224.9472,223.1424,225.1008,222.0416,220.1088,188.8&chds=180,250&chxl=0:|sbinary|javolution+xml+format|xstream+(stax+with+conv)|xstream+(stax)|xstream+(xpp)|json+(jackson)|binaryxml/FI|stax/aalto|stax/woodstox|scala|java+(externalizable)|java|thrift|protobuf&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=10&chxt=y&nonsense=aaa.png'/>

= Numbers =

|| ||Object create(nano sec)||Serialization(nano sec)||Deserialization(nano sec)||Serialized Size(bytes)||
||protobuf||429.50400||4237.44000||5082.11200||217||
||thrift||327.64160||4762.49600||7378.94400||314||
||java||223.65440||14601.47200||73108.48000||845||
||java (externalizable)||225.04960||5419.00800||18635.90400||315||
||scala||187.90400||36075.39200||193432.96000||1950||
||stax/woodstox||221.84960||6272.00000||9828.48000||406||
||stax/aalto||223.24480||4944.51200||7803.00800||406||
||binaryxml/FI||224.84480||15300.48000||16663.93600||224||
||json (jackson)||224.94720||3008.00000||4543.10400||310||
||xstream (xpp)||223.14240||138292.48000||236701.44000||931||
||xstream (stax)||225.10080||19242.49600||57246.46400||310||
||xstream (stax with conv)||222.04160||11847.55200||25675.52000||325||
||javolution xml format||220.10880||3958.52800||9916.03200||345||
||sbinary||188.80000||4214.01600||4021.50400||190||