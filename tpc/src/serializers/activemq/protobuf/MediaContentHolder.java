//
// Generated by protoc, do not edit by hand.
//
package serializers.activemq.protobuf;

public class MediaContentHolder {

   static public interface Image extends org.apache.activemq.protobuf.PBMessage<Image.ImageBean, Image.ImageBuffer> {


      public static enum Size {

         SMALL("SMALL", 0),
         LARGE("LARGE", 1);

         private final String name;
         private final int value;

         private Size(String name, int value) {
            this.name = name;
            this.value = value;
         }

         public final int getNumber() {
            return value;
         }

         public final String toString() {
            return name;
         }

         public static Size valueOf(int value) {
            switch (value) {
            case 0:
               return SMALL;
            case 1:
               return LARGE;
            default:
               return null;
            }
         }

      }

      // required string uri = 1;
      public boolean hasUri();
      public java.lang.String getUri();
      // optional string title = 2;
      public boolean hasTitle();
      public java.lang.String getTitle();
      // optional int32 width = 3;
      public boolean hasWidth();
      public int getWidth();
      // optional int32 height = 4;
      public boolean hasHeight();
      public int getHeight();
      // optional Size size = 5;
      public boolean hasSize();
      public Image.Size getSize();
      public ImageBean copy();
      public ImageBuffer freeze();
      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix);

      static public final class ImageBean implements Image {

         ImageBuffer frozen;
         ImageBean bean;

         public ImageBean() {
            this.bean = this;
         }

         public ImageBean(ImageBean copy) {
            this.bean = copy;
         }

         public ImageBean copy() {
            return new ImageBean(bean);
         }

         public boolean frozen() {
            return frozen!=null;
         }

         public ImageBuffer freeze() {
            if( frozen==null ) {
               frozen = new ImageBuffer(bean);
               assert deepFreeze();
            }
            return frozen;
         }

         private boolean deepFreeze() {
            frozen.serializedSizeUnframed();
            return true;
         }

         private void copyCheck() {
            assert frozen==null : org.apache.activemq.protobuf.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            if (bean != this) {
               copy(bean);
            }
         }

         private void copy(ImageBean other) {
            this.bean = this;
            this.f_uri = other.f_uri;
            this.b_uri = other.b_uri;
            this.f_title = other.f_title;
            this.b_title = other.b_title;
            this.f_width = other.f_width;
            this.b_width = other.b_width;
            this.f_height = other.f_height;
            this.b_height = other.b_height;
            this.f_size = other.f_size;
            this.b_size = other.b_size;
         }

         // required string uri = 1;
         private java.lang.String f_uri = null;
         private boolean b_uri;

         public boolean hasUri() {
            return bean.b_uri;
         }

         public java.lang.String getUri() {
            return bean.f_uri;
         }

         public ImageBean setUri(java.lang.String uri) {
            copyCheck();
            this.b_uri = true;
            this.f_uri = uri;
            return this;
         }

         public void clearUri() {
            copyCheck();
            this.b_uri = false;
            this.f_uri = null;
         }

         // optional string title = 2;
         private java.lang.String f_title = null;
         private boolean b_title;

         public boolean hasTitle() {
            return bean.b_title;
         }

         public java.lang.String getTitle() {
            return bean.f_title;
         }

         public ImageBean setTitle(java.lang.String title) {
            copyCheck();
            this.b_title = true;
            this.f_title = title;
            return this;
         }

         public void clearTitle() {
            copyCheck();
            this.b_title = false;
            this.f_title = null;
         }

         // optional int32 width = 3;
         private int f_width = 0;
         private boolean b_width;

         public boolean hasWidth() {
            return bean.b_width;
         }

         public int getWidth() {
            return bean.f_width;
         }

         public ImageBean setWidth(int width) {
            copyCheck();
            this.b_width = true;
            this.f_width = width;
            return this;
         }

         public void clearWidth() {
            copyCheck();
            this.b_width = false;
            this.f_width = 0;
         }

         // optional int32 height = 4;
         private int f_height = 0;
         private boolean b_height;

         public boolean hasHeight() {
            return bean.b_height;
         }

         public int getHeight() {
            return bean.f_height;
         }

         public ImageBean setHeight(int height) {
            copyCheck();
            this.b_height = true;
            this.f_height = height;
            return this;
         }

         public void clearHeight() {
            copyCheck();
            this.b_height = false;
            this.f_height = 0;
         }

         // optional Size size = 5;
         private Image.Size f_size = null;
         private boolean b_size;

         public boolean hasSize() {
            return bean.b_size;
         }

         public Image.Size getSize() {
            return bean.f_size;
         }

         public ImageBean setSize(Image.Size size) {
            copyCheck();
            this.b_size = true;
            this.f_size = size;
            return this;
         }

         public void clearSize() {
            copyCheck();
            this.b_size = false;
            this.f_size = null;
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasUri() ) {
               sb.append(prefix+"uri: ");
               sb.append(getUri());
               sb.append("\n");
            }
            if(  hasTitle() ) {
               sb.append(prefix+"title: ");
               sb.append(getTitle());
               sb.append("\n");
            }
            if(  hasWidth() ) {
               sb.append(prefix+"width: ");
               sb.append(getWidth());
               sb.append("\n");
            }
            if(  hasHeight() ) {
               sb.append(prefix+"height: ");
               sb.append(getHeight());
               sb.append("\n");
            }
            if(  hasSize() ) {
               sb.append(prefix+"size: ");
               sb.append(getSize());
               sb.append("\n");
            }
            return sb;
         }

         public ImageBean mergeUnframed(java.io.InputStream input) throws java.io.IOException {
            return mergeUnframed(new org.apache.activemq.protobuf.CodedInputStream(input));
         }

         public ImageBean mergeUnframed(org.apache.activemq.protobuf.CodedInputStream input) throws java.io.IOException {
            copyCheck();
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 10:
                  setUri(input.readString());
                  break;
               case 18:
                  setTitle(input.readString());
                  break;
               case 24:
                  setWidth(input.readInt32());
                  break;
               case 32:
                  setHeight(input.readInt32());
                  break;
               case 40:
                  {
                     int t = input.readEnum();
                     Image.Size value = Image.Size.valueOf(t);
                     if( value !=null ) {
                        setSize(value);
                     }
                  }
                  break;
               }
            }
         }
         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=ImageBean.class )
               return false;
            
            return equals((ImageBean)obj);
         }
         
         public boolean equals(ImageBean obj) {
            if (hasUri() ^ obj.hasUri() ) 
               return false;
            if (hasUri() && ( !getUri().equals(obj.getUri()) ))
               return false;
            if (hasTitle() ^ obj.hasTitle() ) 
               return false;
            if (hasTitle() && ( !getTitle().equals(obj.getTitle()) ))
               return false;
            if (hasWidth() ^ obj.hasWidth() ) 
               return false;
            if (hasWidth() && ( getWidth()!=obj.getWidth() ))
               return false;
            if (hasHeight() ^ obj.hasHeight() ) 
               return false;
            if (hasHeight() && ( getHeight()!=obj.getHeight() ))
               return false;
            if (hasSize() ^ obj.hasSize() ) 
               return false;
            if (hasSize() && ( !getSize().equals(obj.getSize()) ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=1125264267;
            if (hasUri()) {
               rc ^= ( 85324^getUri().hashCode() );
            }
            if (hasTitle()) {
               rc ^= ( 80818744^getTitle().hashCode() );
            }
            if (hasWidth()) {
               rc ^= ( 83574182^getWidth() );
            }
            if (hasHeight()) {
               rc ^= ( -2137162425^getHeight() );
            }
            if (hasSize()) {
               rc ^= ( 2577441^getSize().hashCode() );
            }
            return rc;
         }
         
         public ImageBean mergeFrom(Image other) {
            copyCheck();
            if (other.hasUri()) {
               setUri(other.getUri());
            }
            if (other.hasTitle()) {
               setTitle(other.getTitle());
            }
            if (other.hasWidth()) {
               setWidth(other.getWidth());
            }
            if (other.hasHeight()) {
               setHeight(other.getHeight());
            }
            if (other.hasSize()) {
               setSize(other.getSize());
            }
            return this;
         }

         public void clear() {
            clearUri();
            clearTitle();
            clearWidth();
            clearHeight();
            clearSize();
         }

         public void readExternal(java.io.DataInput in) throws java.io.IOException {
            assert frozen==null : org.apache.activemq.protobuf.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            bean = this;
            frozen = null;
            if( in.readBoolean() ) {
               f_uri = in.readUTF();
               b_uri = true;
            } else {
               f_uri = null;
               b_uri = false;
            }
            if( in.readBoolean() ) {
               f_title = in.readUTF();
               b_title = true;
            } else {
               f_title = null;
               b_title = false;
            }
            f_width = in.readInt();
            b_width = true;
            f_height = in.readInt();
            b_height = true;
            if( in.readBoolean() ) {
               f_size = Image.Size.valueOf(in.readShort());
               b_size = true;
            } else {
               f_size = null;
               b_size = false;
            }
         }

         public void writeExternal(java.io.DataOutput out) throws java.io.IOException {
            if( bean.f_uri!=null ) {
               out.writeBoolean(true);
               out.writeUTF(bean.f_uri);
            } else {
               out.writeBoolean(false);
            }
            if( bean.f_title!=null ) {
               out.writeBoolean(true);
               out.writeUTF(bean.f_title);
            } else {
               out.writeBoolean(false);
            }
            out.writeInt(bean.f_width);
            out.writeInt(bean.f_height);
            if( bean.f_size!=null ) {
               out.writeBoolean(true);
               out.writeShort(bean.f_size.getNumber());
            } else {
               out.writeBoolean(false);
            }
         }

      }

      static public final class ImageBuffer implements org.apache.activemq.protobuf.MessageBuffer<Image.ImageBean, Image.ImageBuffer>, Image {

         private ImageBean bean;
         private org.apache.activemq.util.buffer.Buffer buffer;
         private int size=-1;
         private int hashCode;

         private ImageBuffer(org.apache.activemq.util.buffer.Buffer buffer) {
            this.buffer = buffer;
         }

         private ImageBuffer(ImageBean bean) {
            this.bean = bean;
         }

         public ImageBean copy() {
            return bean().copy();
         }

         public ImageBuffer freeze() {
            return this;
         }

         private ImageBean bean() {
            if (bean == null) {
               try {
                  bean = new ImageBean().mergeUnframed(new org.apache.activemq.protobuf.CodedInputStream(buffer));
                  bean.frozen=this;
               } catch (org.apache.activemq.protobuf.InvalidProtocolBufferException e) {
                  throw new RuntimeException(e);
               } catch (java.io.IOException e) {
                  throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
               }
            }
            return bean;
         }

         public String toString() {
            return bean().toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            return bean().toString(sb, prefix);
         }

         // required string uri = 1;
         public boolean hasUri() {
            return bean().hasUri();
         }

         public java.lang.String getUri() {
            return bean().getUri();
         }

         // optional string title = 2;
         public boolean hasTitle() {
            return bean().hasTitle();
         }

         public java.lang.String getTitle() {
            return bean().getTitle();
         }

         // optional int32 width = 3;
         public boolean hasWidth() {
            return bean().hasWidth();
         }

         public int getWidth() {
            return bean().getWidth();
         }

         // optional int32 height = 4;
         public boolean hasHeight() {
            return bean().hasHeight();
         }

         public int getHeight() {
            return bean().getHeight();
         }

         // optional Size size = 5;
         public boolean hasSize() {
            return bean().hasSize();
         }

         public Image.Size getSize() {
            return bean().getSize();
         }

         public org.apache.activemq.util.buffer.Buffer toUnframedBuffer() {
            if( buffer !=null ) {
               return buffer;
            }
            return org.apache.activemq.protobuf.MessageBufferSupport.toUnframedBuffer(this);
         }

         public org.apache.activemq.util.buffer.Buffer toFramedBuffer() {
            return org.apache.activemq.protobuf.MessageBufferSupport.toFramedBuffer(this);
         }

         public byte[] toUnframedByteArray() {
            return toUnframedBuffer().toByteArray();
         }

         public byte[] toFramedByteArray() {
            return toFramedBuffer().toByteArray();
         }

         public void writeFramed(org.apache.activemq.protobuf.CodedOutputStream output) throws java.io.IOException {
            output.writeRawVarint32(serializedSizeUnframed());
            writeUnframed(output);
         }

         public void writeFramed(java.io.OutputStream output) throws java.io.IOException {
            org.apache.activemq.protobuf.CodedOutputStream codedOutput = new org.apache.activemq.protobuf.CodedOutputStream(output);
            writeFramed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(java.io.OutputStream output) throws java.io.IOException {
            org.apache.activemq.protobuf.CodedOutputStream codedOutput = new org.apache.activemq.protobuf.CodedOutputStream(output);
            writeUnframed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(org.apache.activemq.protobuf.CodedOutputStream output) throws java.io.IOException {
            if (buffer == null) {
               int size = serializedSizeUnframed();
               buffer = output.getNextBuffer(size);
               org.apache.activemq.protobuf.CodedOutputStream original=null;
               if( buffer == null ) {
                  buffer = new org.apache.activemq.util.buffer.Buffer(new byte[size]);
                  original = output;
                  output = new org.apache.activemq.protobuf.CodedOutputStream(buffer);
               }
               output.writeString(1, bean.getUri());
               if (bean.hasTitle()) {
                  output.writeString(2, bean.getTitle());
               }
               if (bean.hasWidth()) {
                  output.writeInt32(3, bean.getWidth());
               }
               if (bean.hasHeight()) {
                  output.writeInt32(4, bean.getHeight());
               }
               if (bean.hasSize()) {
                  output.writeEnum(5, bean.getSize().getNumber());
               }
               if( original !=null ) {
                  output.checkNoSpaceLeft();
                  output = original;
                  output.writeRawBytes(buffer);
               }
            } else {
               output.writeRawBytes(buffer);
            }
         }

         public int serializedSizeFramed() {
            int t = serializedSizeUnframed();
            return org.apache.activemq.protobuf.CodedOutputStream.computeRawVarint32Size(t) + t;
         }

         public int serializedSizeUnframed() {
            if (buffer != null) {
               return buffer.length;
            }
            if (size != -1)
               return size;

            size = 0;
            size += org.apache.activemq.protobuf.CodedOutputStream.computeStringSize(1, getUri());
            if (hasTitle()) {
               size += org.apache.activemq.protobuf.CodedOutputStream.computeStringSize(2, getTitle());
            }
            if (hasWidth()) {
               size += org.apache.activemq.protobuf.CodedOutputStream.computeInt32Size(3, getWidth());
            }
            if (hasHeight()) {
               size += org.apache.activemq.protobuf.CodedOutputStream.computeInt32Size(4, getHeight());
            }
            if (hasSize()) {
               size += org.apache.activemq.protobuf.CodedOutputStream.computeEnumSize(5, getSize().getNumber());
            }
            return size;
         }

         public static ImageBean parseUnframed(org.apache.activemq.protobuf.CodedInputStream data) throws org.apache.activemq.protobuf.InvalidProtocolBufferException, java.io.IOException {
            return new ImageBean().mergeUnframed(data);
         }

         public static ImageBean parseUnframed(java.io.InputStream data) throws org.apache.activemq.protobuf.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(new org.apache.activemq.protobuf.CodedInputStream(data));
         }

         public static ImageBuffer parseUnframed(org.apache.activemq.util.buffer.Buffer data) throws org.apache.activemq.protobuf.InvalidProtocolBufferException {
            return new ImageBuffer(data);
         }

         public static ImageBuffer parseUnframed(byte[] data) throws org.apache.activemq.protobuf.InvalidProtocolBufferException {
            return parseUnframed(new org.apache.activemq.util.buffer.Buffer(data));
         }

         public static ImageBuffer parseFramed(org.apache.activemq.protobuf.CodedInputStream data) throws org.apache.activemq.protobuf.InvalidProtocolBufferException, java.io.IOException {
            int length = data.readRawVarint32();
            int oldLimit = data.pushLimit(length);
            ImageBuffer rc = parseUnframed(data.readRawBytes(length));
            data.popLimit(oldLimit);
            return rc;
         }

         public static ImageBuffer parseFramed(org.apache.activemq.util.buffer.Buffer data) throws org.apache.activemq.protobuf.InvalidProtocolBufferException {
            try {
               org.apache.activemq.protobuf.CodedInputStream input = new org.apache.activemq.protobuf.CodedInputStream(data);
               ImageBuffer rc = parseFramed(input);
               input.checkLastTagWas(0);
               return rc;
            } catch (org.apache.activemq.protobuf.InvalidProtocolBufferException e) {
               throw e;
            } catch (java.io.IOException e) {
               throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
            }
         }

         public static ImageBuffer parseFramed(byte[] data) throws org.apache.activemq.protobuf.InvalidProtocolBufferException {
            return parseFramed(new org.apache.activemq.util.buffer.Buffer(data));
         }

         public static ImageBuffer parseFramed(java.io.InputStream data) throws org.apache.activemq.protobuf.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(org.apache.activemq.protobuf.MessageBufferSupport.readFrame(data));
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=ImageBuffer.class )
               return false;
            
            return equals((ImageBuffer)obj);
         }
         
         public boolean equals(ImageBuffer obj) {
            return toUnframedBuffer().equals(obj.toUnframedBuffer());
         }
         
         public int hashCode() {
            if( hashCode==0 ) {
            hashCode=-937877157 ^ toUnframedBuffer().hashCode();
            }
            return hashCode;
         }
         
         public boolean frozen() {
            return true;
         }
      }

   }


   static public interface Media extends org.apache.activemq.protobuf.PBMessage<Media.MediaBean, Media.MediaBuffer> {


      public static enum Player {

         JAVA("JAVA", 0),
         FLASH("FLASH", 0);

         private final String name;
         private final int value;

         private Player(String name, int value) {
            this.name = name;
            this.value = value;
         }

         public final int getNumber() {
            return value;
         }

         public final String toString() {
            return name;
         }

         public static Player valueOf(int value) {
            switch (value) {
            case 0:
               return JAVA;
            default:
               return null;
            }
         }

      }

      // required string uri = 1;
      public boolean hasUri();
      public java.lang.String getUri();
      // optional string title = 2;
      public boolean hasTitle();
      public java.lang.String getTitle();
      // optional int32 width = 3;
      public boolean hasWidth();
      public int getWidth();
      // optional int32 height = 4;
      public boolean hasHeight();
      public int getHeight();
      // optional string format = 5;
      public boolean hasFormat();
      public java.lang.String getFormat();
      // optional int64 duration = 6;
      public boolean hasDuration();
      public long getDuration();
      // optional int64 size = 7;
      public boolean hasSize();
      public long getSize();
      // optional int32 bitrate = 8;
      public boolean hasBitrate();
      public int getBitrate();
      // repeated string person = 9;
      public boolean hasPerson();
      public java.util.List<java.lang.String> getPersonList();
      public int getPersonCount();
      public java.lang.String getPerson(int index);
      // optional Player player = 10;
      public boolean hasPlayer();
      public Media.Player getPlayer();
      // optional string copyright = 11;
      public boolean hasCopyright();
      public java.lang.String getCopyright();
      public MediaBean copy();
      public MediaBuffer freeze();
      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix);

      static public final class MediaBean implements Media {

         MediaBuffer frozen;
         MediaBean bean;

         public MediaBean() {
            this.bean = this;
         }

         public MediaBean(MediaBean copy) {
            this.bean = copy;
         }

         public MediaBean copy() {
            return new MediaBean(bean);
         }

         public boolean frozen() {
            return frozen!=null;
         }

         public MediaBuffer freeze() {
            if( frozen==null ) {
               frozen = new MediaBuffer(bean);
               assert deepFreeze();
            }
            return frozen;
         }

         private boolean deepFreeze() {
            frozen.serializedSizeUnframed();
            return true;
         }

         private void copyCheck() {
            assert frozen==null : org.apache.activemq.protobuf.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            if (bean != this) {
               copy(bean);
            }
         }

         private void copy(MediaBean other) {
            this.bean = this;
            this.f_uri = other.f_uri;
            this.b_uri = other.b_uri;
            this.f_title = other.f_title;
            this.b_title = other.b_title;
            this.f_width = other.f_width;
            this.b_width = other.b_width;
            this.f_height = other.f_height;
            this.b_height = other.b_height;
            this.f_format = other.f_format;
            this.b_format = other.b_format;
            this.f_duration = other.f_duration;
            this.b_duration = other.b_duration;
            this.f_size = other.f_size;
            this.b_size = other.b_size;
            this.f_bitrate = other.f_bitrate;
            this.b_bitrate = other.b_bitrate;
            this.f_person = other.f_person;
            if( this.f_person !=null && !other.frozen()) {
               this.f_person = new java.util.ArrayList<java.lang.String>(this.f_person);
            }
            this.f_player = other.f_player;
            this.b_player = other.b_player;
            this.f_copyright = other.f_copyright;
            this.b_copyright = other.b_copyright;
         }

         // required string uri = 1;
         private java.lang.String f_uri = null;
         private boolean b_uri;

         public boolean hasUri() {
            return bean.b_uri;
         }

         public java.lang.String getUri() {
            return bean.f_uri;
         }

         public MediaBean setUri(java.lang.String uri) {
            copyCheck();
            this.b_uri = true;
            this.f_uri = uri;
            return this;
         }

         public void clearUri() {
            copyCheck();
            this.b_uri = false;
            this.f_uri = null;
         }

         // optional string title = 2;
         private java.lang.String f_title = null;
         private boolean b_title;

         public boolean hasTitle() {
            return bean.b_title;
         }

         public java.lang.String getTitle() {
            return bean.f_title;
         }

         public MediaBean setTitle(java.lang.String title) {
            copyCheck();
            this.b_title = true;
            this.f_title = title;
            return this;
         }

         public void clearTitle() {
            copyCheck();
            this.b_title = false;
            this.f_title = null;
         }

         // optional int32 width = 3;
         private int f_width = 0;
         private boolean b_width;

         public boolean hasWidth() {
            return bean.b_width;
         }

         public int getWidth() {
            return bean.f_width;
         }

         public MediaBean setWidth(int width) {
            copyCheck();
            this.b_width = true;
            this.f_width = width;
            return this;
         }

         public void clearWidth() {
            copyCheck();
            this.b_width = false;
            this.f_width = 0;
         }

         // optional int32 height = 4;
         private int f_height = 0;
         private boolean b_height;

         public boolean hasHeight() {
            return bean.b_height;
         }

         public int getHeight() {
            return bean.f_height;
         }

         public MediaBean setHeight(int height) {
            copyCheck();
            this.b_height = true;
            this.f_height = height;
            return this;
         }

         public void clearHeight() {
            copyCheck();
            this.b_height = false;
            this.f_height = 0;
         }

         // optional string format = 5;
         private java.lang.String f_format = null;
         private boolean b_format;

         public boolean hasFormat() {
            return bean.b_format;
         }

         public java.lang.String getFormat() {
            return bean.f_format;
         }

         public MediaBean setFormat(java.lang.String format) {
            copyCheck();
            this.b_format = true;
            this.f_format = format;
            return this;
         }

         public void clearFormat() {
            copyCheck();
            this.b_format = false;
            this.f_format = null;
         }

         // optional int64 duration = 6;
         private long f_duration = 0;
         private boolean b_duration;

         public boolean hasDuration() {
            return bean.b_duration;
         }

         public long getDuration() {
            return bean.f_duration;
         }

         public MediaBean setDuration(long duration) {
            copyCheck();
            this.b_duration = true;
            this.f_duration = duration;
            return this;
         }

         public void clearDuration() {
            copyCheck();
            this.b_duration = false;
            this.f_duration = 0;
         }

         // optional int64 size = 7;
         private long f_size = 0;
         private boolean b_size;

         public boolean hasSize() {
            return bean.b_size;
         }

         public long getSize() {
            return bean.f_size;
         }

         public MediaBean setSize(long size) {
            copyCheck();
            this.b_size = true;
            this.f_size = size;
            return this;
         }

         public void clearSize() {
            copyCheck();
            this.b_size = false;
            this.f_size = 0;
         }

         // optional int32 bitrate = 8;
         private int f_bitrate = 0;
         private boolean b_bitrate;

         public boolean hasBitrate() {
            return bean.b_bitrate;
         }

         public int getBitrate() {
            return bean.f_bitrate;
         }

         public MediaBean setBitrate(int bitrate) {
            copyCheck();
            this.b_bitrate = true;
            this.f_bitrate = bitrate;
            return this;
         }

         public void clearBitrate() {
            copyCheck();
            this.b_bitrate = false;
            this.f_bitrate = 0;
         }

         // repeated string person = 9;
         private java.util.List<java.lang.String> f_person;

         public boolean hasPerson() {
            return bean.f_person!=null && !bean.f_person.isEmpty();
         }

         public java.util.List<java.lang.String> getPersonList() {
            return bean.f_person;
         }

         public java.util.List<java.lang.String> createPersonList() {
            copyCheck();
            if( this.f_person == null ) {
               this.f_person = new java.util.ArrayList<java.lang.String>();
            }
            return bean.f_person;
         }

         public MediaBean setPersonList(java.util.List<java.lang.String> person) {
            copyCheck();
            this.f_person = person;
            return this;
         }

         public int getPersonCount() {
            if( bean.f_person == null ) {
               return 0;
            }
            return bean.f_person.size();
         }

         public java.lang.String getPerson(int index) {
            if( bean.f_person == null ) {
               return null;
            }
            return bean.f_person.get(index);
         }

         public MediaBean setPerson(int index, java.lang.String value) {
            this.createPersonList().set(index, value);
            return this;
         }

         public MediaBean addPerson(java.lang.String value) {
            this.createPersonList().add(value);
            return this;
         }

         public MediaBean addAllPerson(java.lang.Iterable<? extends java.lang.String> collection) {
            org.apache.activemq.protobuf.MessageBufferSupport.addAll(collection, this.createPersonList());
            return this;
         }

         public void clearPerson() {
            copyCheck();
            this.f_person = null;
         }

         // optional Player player = 10;
         private Media.Player f_player = null;
         private boolean b_player;

         public boolean hasPlayer() {
            return bean.b_player;
         }

         public Media.Player getPlayer() {
            return bean.f_player;
         }

         public MediaBean setPlayer(Media.Player player) {
            copyCheck();
            this.b_player = true;
            this.f_player = player;
            return this;
         }

         public void clearPlayer() {
            copyCheck();
            this.b_player = false;
            this.f_player = null;
         }

         // optional string copyright = 11;
         private java.lang.String f_copyright = null;
         private boolean b_copyright;

         public boolean hasCopyright() {
            return bean.b_copyright;
         }

         public java.lang.String getCopyright() {
            return bean.f_copyright;
         }

         public MediaBean setCopyright(java.lang.String copyright) {
            copyCheck();
            this.b_copyright = true;
            this.f_copyright = copyright;
            return this;
         }

         public void clearCopyright() {
            copyCheck();
            this.b_copyright = false;
            this.f_copyright = null;
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasUri() ) {
               sb.append(prefix+"uri: ");
               sb.append(getUri());
               sb.append("\n");
            }
            if(  hasTitle() ) {
               sb.append(prefix+"title: ");
               sb.append(getTitle());
               sb.append("\n");
            }
            if(  hasWidth() ) {
               sb.append(prefix+"width: ");
               sb.append(getWidth());
               sb.append("\n");
            }
            if(  hasHeight() ) {
               sb.append(prefix+"height: ");
               sb.append(getHeight());
               sb.append("\n");
            }
            if(  hasFormat() ) {
               sb.append(prefix+"format: ");
               sb.append(getFormat());
               sb.append("\n");
            }
            if(  hasDuration() ) {
               sb.append(prefix+"duration: ");
               sb.append(getDuration());
               sb.append("\n");
            }
            if(  hasSize() ) {
               sb.append(prefix+"size: ");
               sb.append(getSize());
               sb.append("\n");
            }
            if(  hasBitrate() ) {
               sb.append(prefix+"bitrate: ");
               sb.append(getBitrate());
               sb.append("\n");
            }
            if(  hasPerson() ) {
               java.util.List<java.lang.String> l = getPersonList();
               for( int i=0; i < l.size(); i++ ) {
                  sb.append(prefix+"person["+i+"]: ");
                  sb.append(l.get(i));
                  sb.append("\n");
               }
            }
            if(  hasPlayer() ) {
               sb.append(prefix+"player: ");
               sb.append(getPlayer());
               sb.append("\n");
            }
            if(  hasCopyright() ) {
               sb.append(prefix+"copyright: ");
               sb.append(getCopyright());
               sb.append("\n");
            }
            return sb;
         }

         public MediaBean mergeUnframed(java.io.InputStream input) throws java.io.IOException {
            return mergeUnframed(new org.apache.activemq.protobuf.CodedInputStream(input));
         }

         public MediaBean mergeUnframed(org.apache.activemq.protobuf.CodedInputStream input) throws java.io.IOException {
            copyCheck();
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 10:
                  setUri(input.readString());
                  break;
               case 18:
                  setTitle(input.readString());
                  break;
               case 24:
                  setWidth(input.readInt32());
                  break;
               case 32:
                  setHeight(input.readInt32());
                  break;
               case 42:
                  setFormat(input.readString());
                  break;
               case 48:
                  setDuration(input.readInt64());
                  break;
               case 56:
                  setSize(input.readInt64());
                  break;
               case 64:
                  setBitrate(input.readInt32());
                  break;
               case 74:
                  createPersonList().add(input.readString());
                  break;
               case 80:
                  {
                     int t = input.readEnum();
                     Media.Player value = Media.Player.valueOf(t);
                     if( value !=null ) {
                        setPlayer(value);
                     }
                  }
                  break;
               case 90:
                  setCopyright(input.readString());
                  break;
               }
            }
         }
         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=MediaBean.class )
               return false;
            
            return equals((MediaBean)obj);
         }
         
         public boolean equals(MediaBean obj) {
            if (hasUri() ^ obj.hasUri() ) 
               return false;
            if (hasUri() && ( !getUri().equals(obj.getUri()) ))
               return false;
            if (hasTitle() ^ obj.hasTitle() ) 
               return false;
            if (hasTitle() && ( !getTitle().equals(obj.getTitle()) ))
               return false;
            if (hasWidth() ^ obj.hasWidth() ) 
               return false;
            if (hasWidth() && ( getWidth()!=obj.getWidth() ))
               return false;
            if (hasHeight() ^ obj.hasHeight() ) 
               return false;
            if (hasHeight() && ( getHeight()!=obj.getHeight() ))
               return false;
            if (hasFormat() ^ obj.hasFormat() ) 
               return false;
            if (hasFormat() && ( !getFormat().equals(obj.getFormat()) ))
               return false;
            if (hasDuration() ^ obj.hasDuration() ) 
               return false;
            if (hasDuration() && ( getDuration()!=obj.getDuration() ))
               return false;
            if (hasSize() ^ obj.hasSize() ) 
               return false;
            if (hasSize() && ( getSize()!=obj.getSize() ))
               return false;
            if (hasBitrate() ^ obj.hasBitrate() ) 
               return false;
            if (hasBitrate() && ( getBitrate()!=obj.getBitrate() ))
               return false;
            if (hasPerson() ^ obj.hasPerson() ) 
               return false;
            if (hasPerson() && ( !getPersonList().equals(obj.getPersonList()) ))
               return false;
            if (hasPlayer() ^ obj.hasPlayer() ) 
               return false;
            if (hasPlayer() && ( !getPlayer().equals(obj.getPlayer()) ))
               return false;
            if (hasCopyright() ^ obj.hasCopyright() ) 
               return false;
            if (hasCopyright() && ( !getCopyright().equals(obj.getCopyright()) ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=-151091820;
            if (hasUri()) {
               rc ^= ( 85324^getUri().hashCode() );
            }
            if (hasTitle()) {
               rc ^= ( 80818744^getTitle().hashCode() );
            }
            if (hasWidth()) {
               rc ^= ( 83574182^getWidth() );
            }
            if (hasHeight()) {
               rc ^= ( -2137162425^getHeight() );
            }
            if (hasFormat()) {
               rc ^= ( 2110055447^getFormat().hashCode() );
            }
            if (hasDuration()) {
               rc ^= ( -1927368268^(new Long(getDuration())).hashCode() );
            }
            if (hasSize()) {
               rc ^= ( 2577441^(new Long(getSize())).hashCode() );
            }
            if (hasBitrate()) {
               rc ^= ( 1562383181^getBitrate() );
            }
            if (hasPerson()) {
               rc ^= ( -1907849355^getPersonList().hashCode() );
            }
            if (hasPlayer()) {
               rc ^= ( -1901885695^getPlayer().hashCode() );
            }
            if (hasCopyright()) {
               rc ^= ( -768109657^getCopyright().hashCode() );
            }
            return rc;
         }
         
         public MediaBean mergeFrom(Media other) {
            copyCheck();
            if (other.hasUri()) {
               setUri(other.getUri());
            }
            if (other.hasTitle()) {
               setTitle(other.getTitle());
            }
            if (other.hasWidth()) {
               setWidth(other.getWidth());
            }
            if (other.hasHeight()) {
               setHeight(other.getHeight());
            }
            if (other.hasFormat()) {
               setFormat(other.getFormat());
            }
            if (other.hasDuration()) {
               setDuration(other.getDuration());
            }
            if (other.hasSize()) {
               setSize(other.getSize());
            }
            if (other.hasBitrate()) {
               setBitrate(other.getBitrate());
            }
            if (other.hasPerson()) {
               getPersonList().addAll(other.getPersonList());
            }
            if (other.hasPlayer()) {
               setPlayer(other.getPlayer());
            }
            if (other.hasCopyright()) {
               setCopyright(other.getCopyright());
            }
            return this;
         }

         public void clear() {
            clearUri();
            clearTitle();
            clearWidth();
            clearHeight();
            clearFormat();
            clearDuration();
            clearSize();
            clearBitrate();
            clearPerson();
            clearPlayer();
            clearCopyright();
         }

         public void readExternal(java.io.DataInput in) throws java.io.IOException {
            assert frozen==null : org.apache.activemq.protobuf.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            bean = this;
            frozen = null;
            if( in.readBoolean() ) {
               f_uri = in.readUTF();
               b_uri = true;
            } else {
               f_uri = null;
               b_uri = false;
            }
            if( in.readBoolean() ) {
               f_title = in.readUTF();
               b_title = true;
            } else {
               f_title = null;
               b_title = false;
            }
            f_width = in.readInt();
            b_width = true;
            f_height = in.readInt();
            b_height = true;
            if( in.readBoolean() ) {
               f_format = in.readUTF();
               b_format = true;
            } else {
               f_format = null;
               b_format = false;
            }
            f_duration = in.readLong();
            b_duration = true;
            f_size = in.readLong();
            b_size = true;
            f_bitrate = in.readInt();
            b_bitrate = true;
            {
               int size = in.readShort();
               if( size>=0 ) {
                  f_person = new java.util.ArrayList<java.lang.String>(size);
                  for(int i=0; i<size; i++) {
                     f_person.add(in.readUTF());
                  }
               } else {
                  f_person = null;
               }
            }
            if( in.readBoolean() ) {
               f_player = Media.Player.valueOf(in.readShort());
               b_player = true;
            } else {
               f_player = null;
               b_player = false;
            }
            if( in.readBoolean() ) {
               f_copyright = in.readUTF();
               b_copyright = true;
            } else {
               f_copyright = null;
               b_copyright = false;
            }
         }

         public void writeExternal(java.io.DataOutput out) throws java.io.IOException {
            if( bean.f_uri!=null ) {
               out.writeBoolean(true);
               out.writeUTF(bean.f_uri);
            } else {
               out.writeBoolean(false);
            }
            if( bean.f_title!=null ) {
               out.writeBoolean(true);
               out.writeUTF(bean.f_title);
            } else {
               out.writeBoolean(false);
            }
            out.writeInt(bean.f_width);
            out.writeInt(bean.f_height);
            if( bean.f_format!=null ) {
               out.writeBoolean(true);
               out.writeUTF(bean.f_format);
            } else {
               out.writeBoolean(false);
            }
            out.writeLong(bean.f_duration);
            out.writeLong(bean.f_size);
            out.writeInt(bean.f_bitrate);
            if( bean.f_person!=null ) {
               out.writeShort(bean.f_person.size());
               for(java.lang.String o : bean.f_person) {
                  out.writeUTF(o);
               }
            } else {
               out.writeShort(-1);
            }
            if( bean.f_player!=null ) {
               out.writeBoolean(true);
               out.writeShort(bean.f_player.getNumber());
            } else {
               out.writeBoolean(false);
            }
            if( bean.f_copyright!=null ) {
               out.writeBoolean(true);
               out.writeUTF(bean.f_copyright);
            } else {
               out.writeBoolean(false);
            }
         }

      }

      static public final class MediaBuffer implements org.apache.activemq.protobuf.MessageBuffer<Media.MediaBean, Media.MediaBuffer>, Media {

         private MediaBean bean;
         private org.apache.activemq.util.buffer.Buffer buffer;
         private int size=-1;
         private int hashCode;

         private MediaBuffer(org.apache.activemq.util.buffer.Buffer buffer) {
            this.buffer = buffer;
         }

         private MediaBuffer(MediaBean bean) {
            this.bean = bean;
         }

         public MediaBean copy() {
            return bean().copy();
         }

         public MediaBuffer freeze() {
            return this;
         }

         private MediaBean bean() {
            if (bean == null) {
               try {
                  bean = new MediaBean().mergeUnframed(new org.apache.activemq.protobuf.CodedInputStream(buffer));
                  bean.frozen=this;
               } catch (org.apache.activemq.protobuf.InvalidProtocolBufferException e) {
                  throw new RuntimeException(e);
               } catch (java.io.IOException e) {
                  throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
               }
            }
            return bean;
         }

         public String toString() {
            return bean().toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            return bean().toString(sb, prefix);
         }

         // required string uri = 1;
         public boolean hasUri() {
            return bean().hasUri();
         }

         public java.lang.String getUri() {
            return bean().getUri();
         }

         // optional string title = 2;
         public boolean hasTitle() {
            return bean().hasTitle();
         }

         public java.lang.String getTitle() {
            return bean().getTitle();
         }

         // optional int32 width = 3;
         public boolean hasWidth() {
            return bean().hasWidth();
         }

         public int getWidth() {
            return bean().getWidth();
         }

         // optional int32 height = 4;
         public boolean hasHeight() {
            return bean().hasHeight();
         }

         public int getHeight() {
            return bean().getHeight();
         }

         // optional string format = 5;
         public boolean hasFormat() {
            return bean().hasFormat();
         }

         public java.lang.String getFormat() {
            return bean().getFormat();
         }

         // optional int64 duration = 6;
         public boolean hasDuration() {
            return bean().hasDuration();
         }

         public long getDuration() {
            return bean().getDuration();
         }

         // optional int64 size = 7;
         public boolean hasSize() {
            return bean().hasSize();
         }

         public long getSize() {
            return bean().getSize();
         }

         // optional int32 bitrate = 8;
         public boolean hasBitrate() {
            return bean().hasBitrate();
         }

         public int getBitrate() {
            return bean().getBitrate();
         }

         // repeated string person = 9;
         public boolean hasPerson() {
            return bean().hasPerson();
         }

         public java.util.List<java.lang.String> getPersonList() {
            return bean().getPersonList();
         }

         public int getPersonCount() {
            return bean().getPersonCount();
         }

         public java.lang.String getPerson(int index) {
            return bean().getPerson(index);
         }

         // optional Player player = 10;
         public boolean hasPlayer() {
            return bean().hasPlayer();
         }

         public Media.Player getPlayer() {
            return bean().getPlayer();
         }

         // optional string copyright = 11;
         public boolean hasCopyright() {
            return bean().hasCopyright();
         }

         public java.lang.String getCopyright() {
            return bean().getCopyright();
         }

         public org.apache.activemq.util.buffer.Buffer toUnframedBuffer() {
            if( buffer !=null ) {
               return buffer;
            }
            return org.apache.activemq.protobuf.MessageBufferSupport.toUnframedBuffer(this);
         }

         public org.apache.activemq.util.buffer.Buffer toFramedBuffer() {
            return org.apache.activemq.protobuf.MessageBufferSupport.toFramedBuffer(this);
         }

         public byte[] toUnframedByteArray() {
            return toUnframedBuffer().toByteArray();
         }

         public byte[] toFramedByteArray() {
            return toFramedBuffer().toByteArray();
         }

         public void writeFramed(org.apache.activemq.protobuf.CodedOutputStream output) throws java.io.IOException {
            output.writeRawVarint32(serializedSizeUnframed());
            writeUnframed(output);
         }

         public void writeFramed(java.io.OutputStream output) throws java.io.IOException {
            org.apache.activemq.protobuf.CodedOutputStream codedOutput = new org.apache.activemq.protobuf.CodedOutputStream(output);
            writeFramed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(java.io.OutputStream output) throws java.io.IOException {
            org.apache.activemq.protobuf.CodedOutputStream codedOutput = new org.apache.activemq.protobuf.CodedOutputStream(output);
            writeUnframed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(org.apache.activemq.protobuf.CodedOutputStream output) throws java.io.IOException {
            if (buffer == null) {
               int size = serializedSizeUnframed();
               buffer = output.getNextBuffer(size);
               org.apache.activemq.protobuf.CodedOutputStream original=null;
               if( buffer == null ) {
                  buffer = new org.apache.activemq.util.buffer.Buffer(new byte[size]);
                  original = output;
                  output = new org.apache.activemq.protobuf.CodedOutputStream(buffer);
               }
               output.writeString(1, bean.getUri());
               if (bean.hasTitle()) {
                  output.writeString(2, bean.getTitle());
               }
               if (bean.hasWidth()) {
                  output.writeInt32(3, bean.getWidth());
               }
               if (bean.hasHeight()) {
                  output.writeInt32(4, bean.getHeight());
               }
               if (bean.hasFormat()) {
                  output.writeString(5, bean.getFormat());
               }
               if (bean.hasDuration()) {
                  output.writeInt64(6, bean.getDuration());
               }
               if (bean.hasSize()) {
                  output.writeInt64(7, bean.getSize());
               }
               if (bean.hasBitrate()) {
                  output.writeInt32(8, bean.getBitrate());
               }
               if (bean.hasPerson()) {
                  for (java.lang.String i : bean.getPersonList()) {
                     output.writeString(9, i);
                  }
               }
               if (bean.hasPlayer()) {
                  output.writeEnum(10, bean.getPlayer().getNumber());
               }
               if (bean.hasCopyright()) {
                  output.writeString(11, bean.getCopyright());
               }
               if( original !=null ) {
                  output.checkNoSpaceLeft();
                  output = original;
                  output.writeRawBytes(buffer);
               }
            } else {
               output.writeRawBytes(buffer);
            }
         }

         public int serializedSizeFramed() {
            int t = serializedSizeUnframed();
            return org.apache.activemq.protobuf.CodedOutputStream.computeRawVarint32Size(t) + t;
         }

         public int serializedSizeUnframed() {
            if (buffer != null) {
               return buffer.length;
            }
            if (size != -1)
               return size;

            size = 0;
            size += org.apache.activemq.protobuf.CodedOutputStream.computeStringSize(1, getUri());
            if (hasTitle()) {
               size += org.apache.activemq.protobuf.CodedOutputStream.computeStringSize(2, getTitle());
            }
            if (hasWidth()) {
               size += org.apache.activemq.protobuf.CodedOutputStream.computeInt32Size(3, getWidth());
            }
            if (hasHeight()) {
               size += org.apache.activemq.protobuf.CodedOutputStream.computeInt32Size(4, getHeight());
            }
            if (hasFormat()) {
               size += org.apache.activemq.protobuf.CodedOutputStream.computeStringSize(5, getFormat());
            }
            if (hasDuration()) {
               size += org.apache.activemq.protobuf.CodedOutputStream.computeInt64Size(6, getDuration());
            }
            if (hasSize()) {
               size += org.apache.activemq.protobuf.CodedOutputStream.computeInt64Size(7, getSize());
            }
            if (hasBitrate()) {
               size += org.apache.activemq.protobuf.CodedOutputStream.computeInt32Size(8, getBitrate());
            }
            if (hasPerson()) {
               for (java.lang.String i : getPersonList()) {
                  size += org.apache.activemq.protobuf.CodedOutputStream.computeStringSize(9, i);
               }
            }
            if (hasPlayer()) {
               size += org.apache.activemq.protobuf.CodedOutputStream.computeEnumSize(10, getPlayer().getNumber());
            }
            if (hasCopyright()) {
               size += org.apache.activemq.protobuf.CodedOutputStream.computeStringSize(11, getCopyright());
            }
            return size;
         }

         public static MediaBean parseUnframed(org.apache.activemq.protobuf.CodedInputStream data) throws org.apache.activemq.protobuf.InvalidProtocolBufferException, java.io.IOException {
            return new MediaBean().mergeUnframed(data);
         }

         public static MediaBean parseUnframed(java.io.InputStream data) throws org.apache.activemq.protobuf.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(new org.apache.activemq.protobuf.CodedInputStream(data));
         }

         public static MediaBuffer parseUnframed(org.apache.activemq.util.buffer.Buffer data) throws org.apache.activemq.protobuf.InvalidProtocolBufferException {
            return new MediaBuffer(data);
         }

         public static MediaBuffer parseUnframed(byte[] data) throws org.apache.activemq.protobuf.InvalidProtocolBufferException {
            return parseUnframed(new org.apache.activemq.util.buffer.Buffer(data));
         }

         public static MediaBuffer parseFramed(org.apache.activemq.protobuf.CodedInputStream data) throws org.apache.activemq.protobuf.InvalidProtocolBufferException, java.io.IOException {
            int length = data.readRawVarint32();
            int oldLimit = data.pushLimit(length);
            MediaBuffer rc = parseUnframed(data.readRawBytes(length));
            data.popLimit(oldLimit);
            return rc;
         }

         public static MediaBuffer parseFramed(org.apache.activemq.util.buffer.Buffer data) throws org.apache.activemq.protobuf.InvalidProtocolBufferException {
            try {
               org.apache.activemq.protobuf.CodedInputStream input = new org.apache.activemq.protobuf.CodedInputStream(data);
               MediaBuffer rc = parseFramed(input);
               input.checkLastTagWas(0);
               return rc;
            } catch (org.apache.activemq.protobuf.InvalidProtocolBufferException e) {
               throw e;
            } catch (java.io.IOException e) {
               throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
            }
         }

         public static MediaBuffer parseFramed(byte[] data) throws org.apache.activemq.protobuf.InvalidProtocolBufferException {
            return parseFramed(new org.apache.activemq.util.buffer.Buffer(data));
         }

         public static MediaBuffer parseFramed(java.io.InputStream data) throws org.apache.activemq.protobuf.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(org.apache.activemq.protobuf.MessageBufferSupport.readFrame(data));
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=MediaBuffer.class )
               return false;
            
            return equals((MediaBuffer)obj);
         }
         
         public boolean equals(MediaBuffer obj) {
            return toUnframedBuffer().equals(obj.toUnframedBuffer());
         }
         
         public int hashCode() {
            if( hashCode==0 ) {
            hashCode=844569892 ^ toUnframedBuffer().hashCode();
            }
            return hashCode;
         }
         
         public boolean frozen() {
            return true;
         }
      }

   }


   static public interface MediaContent extends org.apache.activemq.protobuf.PBMessage<MediaContent.MediaContentBean, MediaContent.MediaContentBuffer> {

      // repeated Image image = 1;
      public boolean hasImage();
      public java.util.List<Image> getImageList();
      public int getImageCount();
      public Image getImage(int index);
      // optional Media media = 2;
      public boolean hasMedia();
      public Media getMedia();
      public MediaContentBean copy();
      public MediaContentBuffer freeze();
      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix);

      static public final class MediaContentBean implements MediaContent {

         MediaContentBuffer frozen;
         MediaContentBean bean;

         public MediaContentBean() {
            this.bean = this;
         }

         public MediaContentBean(MediaContentBean copy) {
            this.bean = copy;
         }

         public MediaContentBean copy() {
            return new MediaContentBean(bean);
         }

         public boolean frozen() {
            return frozen!=null;
         }

         public MediaContentBuffer freeze() {
            if( frozen==null ) {
               frozen = new MediaContentBuffer(bean);
               assert deepFreeze();
            }
            return frozen;
         }

         private boolean deepFreeze() {
            frozen.serializedSizeUnframed();
            return true;
         }

         private void copyCheck() {
            assert frozen==null : org.apache.activemq.protobuf.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            if (bean != this) {
               copy(bean);
            }
         }

         private void copy(MediaContentBean other) {
            this.bean = this;
            this.f_image = other.f_image;
            if( this.f_image !=null) {
               this.f_image = new java.util.ArrayList<Image>(other.f_image.size());
               for( Image e :  other.f_image) {
                  this.f_image.add(e.copy());
               }
            }
            this.f_media = other.f_media;
            if( this.f_media !=null ) {
               this.f_media = this.f_media.copy();
            }
         }

         // repeated Image image = 1;
         private java.util.List<Image> f_image;

         public boolean hasImage() {
            return bean.f_image!=null && !bean.f_image.isEmpty();
         }

         public java.util.List<Image> getImageList() {
            return bean.f_image;
         }

         public java.util.List<Image> createImageList() {
            copyCheck();
            if( this.f_image == null ) {
               this.f_image = new java.util.ArrayList<Image>();
            }
            return bean.f_image;
         }

         public MediaContentBean setImageList(java.util.List<Image> image) {
            copyCheck();
            this.f_image = image;
            return this;
         }

         public int getImageCount() {
            if( bean.f_image == null ) {
               return 0;
            }
            return bean.f_image.size();
         }

         public Image getImage(int index) {
            if( bean.f_image == null ) {
               return null;
            }
            return bean.f_image.get(index);
         }

         public MediaContentBean setImage(int index, Image value) {
            this.createImageList().set(index, value);
            return this;
         }

         public MediaContentBean addImage(Image value) {
            this.createImageList().add(value);
            return this;
         }

         public MediaContentBean addAllImage(java.lang.Iterable<? extends Image> collection) {
            org.apache.activemq.protobuf.MessageBufferSupport.addAll(collection, this.createImageList());
            return this;
         }

         public void clearImage() {
            copyCheck();
            this.f_image = null;
         }

         // optional Media media = 2;
         private Media f_media = null;

         public boolean hasMedia() {
            return bean.f_media!=null;
         }

         public Media getMedia() {
            return bean.f_media;
         }

         public MediaContentBean setMedia(Media media) {
            copyCheck();
            this.f_media = media;
            return this;
         }

         public void clearMedia() {
            copyCheck();
            this.f_media = null;
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasImage() ) {
               java.util.List<Image> l = getImageList();
               for( int i=0; i < l.size(); i++ ) {
                  sb.append(prefix+"image["+i+"] {\n");
                  l.get(i).toString(sb, prefix+"  ");
                  sb.append(prefix+"}\n");
               }
            }
            if(  hasMedia() ) {
               sb.append(prefix+"media {\n");
               getMedia().toString(sb, prefix+"  ");
               sb.append(prefix+"}\n");
            }
            return sb;
         }

         public MediaContentBean mergeUnframed(java.io.InputStream input) throws java.io.IOException {
            return mergeUnframed(new org.apache.activemq.protobuf.CodedInputStream(input));
         }

         public MediaContentBean mergeUnframed(org.apache.activemq.protobuf.CodedInputStream input) throws java.io.IOException {
            copyCheck();
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 10:
                  createImageList().add(Image.ImageBuffer.parseFramed(input));
                  break;
               case 18:
                  if (hasMedia()) {
                     setMedia(getMedia().copy().mergeFrom(Media.MediaBuffer.parseFramed(input)));
                  } else {
                     setMedia(Media.MediaBuffer.parseFramed(input));
                  }
                  break;
               }
            }
         }
         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=MediaContentBean.class )
               return false;
            
            return equals((MediaContentBean)obj);
         }
         
         public boolean equals(MediaContentBean obj) {
            if (hasImage() ^ obj.hasImage() ) 
               return false;
            if (hasImage() && ( !getImageList().equals(obj.getImageList()) ))
               return false;
            if (hasMedia() ^ obj.hasMedia() ) 
               return false;
            if (hasMedia() && ( !getMedia().equals(obj.getMedia()) ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=-1857012379;
            if (hasImage()) {
               rc ^= ( 70760763^getImageList().hashCode() );
            }
            if (hasMedia()) {
               rc ^= ( 74219460^getMedia().hashCode() );
            }
            return rc;
         }
         
         public MediaContentBean mergeFrom(MediaContent other) {
            copyCheck();
            if (other.hasImage()) {
               for(Image element: other.getImageList() ) {
                  getImageList().add(element.copy());
               }
            }
            if (other.hasMedia()) {
               if (hasMedia()) {
                  setMedia(getMedia().copy().mergeFrom(other.getMedia()));
               } else {
                  setMedia(other.getMedia().copy());
               }
            }
            return this;
         }

         public void clear() {
            clearImage();
            clearMedia();
         }

         public void readExternal(java.io.DataInput in) throws java.io.IOException {
            assert frozen==null : org.apache.activemq.protobuf.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            bean = this;
            frozen = null;
            {
               int size = in.readShort();
               if( size>=0 ) {
                  f_image = new java.util.ArrayList<Image>(size);
                  for(int i=0; i<size; i++) {
                     Image.ImageBean o = new Image.ImageBean();
                     o.readExternal(in);
                     f_image.add(o);
                  }
               } else {
                  f_image = null;
               }
            }
            if( in.readBoolean() ) {
               Media.MediaBean o = new Media.MediaBean();
               o.readExternal(in);
               f_media = o;
            } else {
               f_media = null;
            }
         }

         public void writeExternal(java.io.DataOutput out) throws java.io.IOException {
            if( bean.f_image!=null ) {
               out.writeShort(bean.f_image.size());
               for(Image o : bean.f_image) {
                  o.copy().writeExternal(out);
               }
            } else {
               out.writeShort(-1);
            }
            if( bean.f_media!=null ) {
               out.writeBoolean(true);
               bean.f_media.copy().writeExternal(out);
            } else {
               out.writeBoolean(false);
            }
         }

      }

      static public final class MediaContentBuffer implements org.apache.activemq.protobuf.MessageBuffer<MediaContent.MediaContentBean, MediaContent.MediaContentBuffer>, MediaContent {

         private MediaContentBean bean;
         private org.apache.activemq.util.buffer.Buffer buffer;
         private int size=-1;
         private int hashCode;

         private MediaContentBuffer(org.apache.activemq.util.buffer.Buffer buffer) {
            this.buffer = buffer;
         }

         private MediaContentBuffer(MediaContentBean bean) {
            this.bean = bean;
         }

         public MediaContentBean copy() {
            return bean().copy();
         }

         public MediaContentBuffer freeze() {
            return this;
         }

         private MediaContentBean bean() {
            if (bean == null) {
               try {
                  bean = new MediaContentBean().mergeUnframed(new org.apache.activemq.protobuf.CodedInputStream(buffer));
                  bean.frozen=this;
               } catch (org.apache.activemq.protobuf.InvalidProtocolBufferException e) {
                  throw new RuntimeException(e);
               } catch (java.io.IOException e) {
                  throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
               }
            }
            return bean;
         }

         public String toString() {
            return bean().toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            return bean().toString(sb, prefix);
         }

         // repeated Image image = 1;
         public boolean hasImage() {
            return bean().hasImage();
         }

         public java.util.List<Image> getImageList() {
            return bean().getImageList();
         }

         public int getImageCount() {
            return bean().getImageCount();
         }

         public Image getImage(int index) {
            return bean().getImage(index);
         }

         // optional Media media = 2;
         public boolean hasMedia() {
            return bean().hasMedia();
         }

         public Media getMedia() {
            return bean().getMedia();
         }

         public org.apache.activemq.util.buffer.Buffer toUnframedBuffer() {
            if( buffer !=null ) {
               return buffer;
            }
            return org.apache.activemq.protobuf.MessageBufferSupport.toUnframedBuffer(this);
         }

         public org.apache.activemq.util.buffer.Buffer toFramedBuffer() {
            return org.apache.activemq.protobuf.MessageBufferSupport.toFramedBuffer(this);
         }

         public byte[] toUnframedByteArray() {
            return toUnframedBuffer().toByteArray();
         }

         public byte[] toFramedByteArray() {
            return toFramedBuffer().toByteArray();
         }

         public void writeFramed(org.apache.activemq.protobuf.CodedOutputStream output) throws java.io.IOException {
            output.writeRawVarint32(serializedSizeUnframed());
            writeUnframed(output);
         }

         public void writeFramed(java.io.OutputStream output) throws java.io.IOException {
            org.apache.activemq.protobuf.CodedOutputStream codedOutput = new org.apache.activemq.protobuf.CodedOutputStream(output);
            writeFramed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(java.io.OutputStream output) throws java.io.IOException {
            org.apache.activemq.protobuf.CodedOutputStream codedOutput = new org.apache.activemq.protobuf.CodedOutputStream(output);
            writeUnframed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(org.apache.activemq.protobuf.CodedOutputStream output) throws java.io.IOException {
            if (buffer == null) {
               int size = serializedSizeUnframed();
               buffer = output.getNextBuffer(size);
               org.apache.activemq.protobuf.CodedOutputStream original=null;
               if( buffer == null ) {
                  buffer = new org.apache.activemq.util.buffer.Buffer(new byte[size]);
                  original = output;
                  output = new org.apache.activemq.protobuf.CodedOutputStream(buffer);
               }
               if (bean.hasImage()) {
                  for (Image i : bean.getImageList()) {
                     org.apache.activemq.protobuf.MessageBufferSupport.writeMessage(output, 1, i.freeze());
                  }
               }
               if (bean.hasMedia()) {
                  org.apache.activemq.protobuf.MessageBufferSupport.writeMessage(output, 2, bean.getMedia().freeze());
               }
               if( original !=null ) {
                  output.checkNoSpaceLeft();
                  output = original;
                  output.writeRawBytes(buffer);
               }
            } else {
               output.writeRawBytes(buffer);
            }
         }

         public int serializedSizeFramed() {
            int t = serializedSizeUnframed();
            return org.apache.activemq.protobuf.CodedOutputStream.computeRawVarint32Size(t) + t;
         }

         public int serializedSizeUnframed() {
            if (buffer != null) {
               return buffer.length;
            }
            if (size != -1)
               return size;

            size = 0;
            if (hasImage()) {
               for (Image i : getImageList()) {
                  size += org.apache.activemq.protobuf.MessageBufferSupport.computeMessageSize(1, i.freeze());
               }
            }
            if (hasMedia()) {
               size += org.apache.activemq.protobuf.MessageBufferSupport.computeMessageSize(2, getMedia().freeze());
            }
            return size;
         }

         public static MediaContentBean parseUnframed(org.apache.activemq.protobuf.CodedInputStream data) throws org.apache.activemq.protobuf.InvalidProtocolBufferException, java.io.IOException {
            return new MediaContentBean().mergeUnframed(data);
         }

         public static MediaContentBean parseUnframed(java.io.InputStream data) throws org.apache.activemq.protobuf.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(new org.apache.activemq.protobuf.CodedInputStream(data));
         }

         public static MediaContentBuffer parseUnframed(org.apache.activemq.util.buffer.Buffer data) throws org.apache.activemq.protobuf.InvalidProtocolBufferException {
            return new MediaContentBuffer(data);
         }

         public static MediaContentBuffer parseUnframed(byte[] data) throws org.apache.activemq.protobuf.InvalidProtocolBufferException {
            return parseUnframed(new org.apache.activemq.util.buffer.Buffer(data));
         }

         public static MediaContentBuffer parseFramed(org.apache.activemq.protobuf.CodedInputStream data) throws org.apache.activemq.protobuf.InvalidProtocolBufferException, java.io.IOException {
            int length = data.readRawVarint32();
            int oldLimit = data.pushLimit(length);
            MediaContentBuffer rc = parseUnframed(data.readRawBytes(length));
            data.popLimit(oldLimit);
            return rc;
         }

         public static MediaContentBuffer parseFramed(org.apache.activemq.util.buffer.Buffer data) throws org.apache.activemq.protobuf.InvalidProtocolBufferException {
            try {
               org.apache.activemq.protobuf.CodedInputStream input = new org.apache.activemq.protobuf.CodedInputStream(data);
               MediaContentBuffer rc = parseFramed(input);
               input.checkLastTagWas(0);
               return rc;
            } catch (org.apache.activemq.protobuf.InvalidProtocolBufferException e) {
               throw e;
            } catch (java.io.IOException e) {
               throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
            }
         }

         public static MediaContentBuffer parseFramed(byte[] data) throws org.apache.activemq.protobuf.InvalidProtocolBufferException {
            return parseFramed(new org.apache.activemq.util.buffer.Buffer(data));
         }

         public static MediaContentBuffer parseFramed(java.io.InputStream data) throws org.apache.activemq.protobuf.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(org.apache.activemq.protobuf.MessageBufferSupport.readFrame(data));
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=MediaContentBuffer.class )
               return false;
            
            return equals((MediaContentBuffer)obj);
         }
         
         public boolean equals(MediaContentBuffer obj) {
            return toUnframedBuffer().equals(obj.toUnframedBuffer());
         }
         
         public int hashCode() {
            if( hashCode==0 ) {
            hashCode=2132419765 ^ toUnframedBuffer().hashCode();
            }
            return hashCode;
         }
         
         public boolean frozen() {
            return true;
         }
      }

   }

}
